// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eth

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// EthABI is the input ABI used to generate the binding from.
const EthABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"KeyDirty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"bytes\"}],\"name\":\"GroupKeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"GroupRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"user\",\"type\":\"address\"}],\"name\":\"GroupLeft\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"GroupInvitation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"groupId\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"ipfsHash\",\"type\":\"bytes\"}],\"name\":\"GroupUpdateIpfsHash\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"int256\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ipfsPeerId\",\"type\":\"string\"},{\"name\":\"boxingKey\",\"type\":\"bytes32\"}],\"name\":\"registerUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"}],\"name\":\"isUserRegistered\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"address\"}],\"name\":\"getUser\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"ipfsHash\",\"type\":\"bytes\"}],\"name\":\"createGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"getGroup\",\"outputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"members\",\"type\":\"address[]\"},{\"name\":\"ipfsHash\",\"type\":\"bytes\"},{\"name\":\"leader\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"leaveGroup\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"getLeader\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"}],\"name\":\"changeLeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"},{\"name\":\"newIpfsHash\",\"type\":\"bytes\"},{\"name\":\"members\",\"type\":\"address[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"vs\",\"type\":\"uint8[]\"}],\"name\":\"changeGroupKey\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"},{\"name\":\"newMember\",\"type\":\"address\"},{\"name\":\"hasInviteRight\",\"type\":\"bool\"}],\"name\":\"inviteUser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"grantInviteRight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"},{\"name\":\"member\",\"type\":\"address\"}],\"name\":\"revokeInviteRight\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"groupId\",\"type\":\"bytes32\"},{\"name\":\"newIpfsHash\",\"type\":\"bytes\"},{\"name\":\"members\",\"type\":\"address[]\"},{\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"name\":\"ss\",\"type\":\"bytes32[]\"},{\"name\":\"vs\",\"type\":\"uint8[]\"}],\"name\":\"updateGroupIpfsHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"self\",\"type\":\"address[]\"}],\"name\":\"heapSort\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// EthBin is the compiled bytecode used for deploying new contracts.
const EthBin = `0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613b70806100606000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630754813a146100e0578063163f7522146101315780631cf51f361461018c57806338f007b61461030f57806368f6d82a14610492578063691d26691461054f5780636f77926b146105ac5780638da5cb5b146106e357806390bc9bed1461073a5780639d163167146107f7578063abab02b514610868578063b567d4ba146108ce578063eab7894f14610a5f578063f59c5b8e14610ab0578063f931544b14610ae1575b600080fd5b3480156100ec57600080fd5b5061012f6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b12565b005b34801561013d57600080fd5b50610172600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dfc565b604051808215151515815260200191505060405180910390f35b34801561019857600080fd5b5061030d6004803603810190808035600019169060200190929190803590602001908201803590602001908080601fe55565b005b34801561031b57600080fd5b506104906004803603810190808035600019169060200190929190803590602001908201803590602001908080601fb005b34801561049e57600080fd5b5061054d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080356000191690602001909291905050506113d7565b005b34801561055b57600080fd5b506105aa6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611657565b005b3480156105b857600080fd5b506105ed600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611a12565b6040518080602001806020018460001916600019168152602001838103835286818151815260200191508051906020019080838360005b8381101561063f578082015181840152602081019050610624565b50505050905090810190601f16801561066c5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156106a557808201518184015260208101905061068a565b50505050905090810190601f1680156106d25780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156106ef57600080fd5b506106f8611d20565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561074657600080fd5b506107f56004803603810190808035600019169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611d45565b005b34801561080357600080fd5b506108266004803603810190808035600019169060200190929190505050612064565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561087457600080fd5b506108cc60048036038101908080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050612112565b005b3480156108da57600080fd5b506108fd600480360381019080803560001916906020019092919050505061260e565b604051808060200180602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848103845288818151815260200191508051906020019080838360005b8381101561097757808201518184015260208101905061095c565b50505050905090810190601f1680156109a45780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019060200280838360005b838110156109e05780820151818401526020810190506109c5565b50505050905001848103825286818151815260200191508051906020019080838360005b83811015610a1f578082015181840152602081019050610a04565b50505050905090810190601f168015610a4c5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610a6b57600080fd5b50610aae6004803603810190808035600019169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506128e7565b005b348015610abc57600080fd5b50610adf6004803603810190808035600019169060200190929190505050612cd9565b005b348015610aed57600080fd5b50610b106004803603810190808035600019169060200190929190505050612f41565b005b6001151560026000846000191660001916815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515141515610bf6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f557365722063616e206e6f74206772616e7420696e766974652072696768740081525060200191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515610ce0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f43616e206e6f74206772616e7420696e7669746520726967687420746f206e6f81526020017f6e206578697374656e742075736572000000000000000000000000000000000081525060400191505060405180910390fd5b610cea82826132f1565b1515610d84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f43616e206e6f74206772616e7420696e7669746520726967687420746f20612081526020017f6e6f6e206d656d6265722075736572000000000000000000000000000000000081525060400191505060405180910390fd5b600160026000846000191660001916815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b600060026000886000191660001916815260200190815260200160002060050160019054906101000a900460ff161515610ef7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f67726f757020646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b60026000886000191660001916815260200190815260200160002060030186610f1f89612064565b6040518084805460018160011615610100020316600290048015610f7a5780601f10610f58576101008083540402835291820191610f7a565b820191906000526020600020905b815481529060010190602001808311610f66575b505083805190602001908083835b602083101515610fad5780518252602082019150602081019050602083039250610f88565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140193505050506040518091039020905061102d8782878787876133cd565b151561103857600080fd5b85600260008960001916600019168152602001908152602001600020600301908051906020019061106a9291906139be565b50600060026000896000191660001916815260200190815260200160002060050160006101000a81548160ff0219169083151502179055507fb5388ad25b89556150d437427d042f64e13a2f2bf6030e5ac7764495362edad0878760405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b838110156111135780820151818401526020810190506110f8565b50505050905090810190601f1680156111405780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050565b600060026000886000191660001916815260200190815260200160002060050160019054906101000a900460ff1615156111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f67726f757020646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b6002600088600019166000191681526020019081526020016000206003018660405180838054600181600116156101000203166002900480156112735780601f10611251576101008083540402835291820191611273565b820191906000526020600020905b81548152906001019060200180831161125f575b505082805190602001908083835b6020831015156112a65780518252602082019150602081019050602083039250611281565b6001836020036101000a03801982511681845116808217855250505050505090500192505050604051809103902090506112e48782878787876133cd565b15156112ef57600080fd5b8560026000896000191660001916815260200190815260200160002060030190805190602001906113219291906139be565b507f54f7f672bf7abc702d283d4028997d3c86d75e43fdbd6c425b50d1d5cdb2229f878760405180836000191660001916815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611393578082015181840152602081019050611378565b50505050905090810190601f1680156113c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a150505050505050565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615151561149c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f557365726e616d6520616c72656164792065786973747300000000000000000081525060200191505060405180910390fd5b82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190805190602001906114f2929190613a3e565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019080519060200190611549929190613a3e565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201816000191690555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055507f54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b933604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1505050565b6001151560026000856000191660001916815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514151561173b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f557365722063616e206e6f7420696e766974650000000000000000000000000081525060200191505060405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff1615156117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e206e6f7420696e76697465206e6f6e206578697374656e74207573657281525060200191505060405180910390fd5b6002600084600019166000191681526020019081526020016000206002018290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018390806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055508060026000856000191660001916815260200190815260200160002060040160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f9478e2f0a42543d96af3b3661efc5aaa23dd42c9f8c970c1e4f4bd01ab42374a338385604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260001916600019168152602001935050505060405180910390a1505050565b6060806000611a1f613abe565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515611ae3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f5573657220646f6573206e6f742065786973740000000000000000000000000081525060200191505060405180910390fd5b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060a06040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bc75780601f10611b9c57610100808354040283529160200191611bc7565b820191906000526020600020905b815481529060010190602001808311611baa57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c695780601f10611c3e57610100808354040283529160200191611c69565b820191906000526020600020905b815481529060010190602001808311611c4c57829003601f168201915b5050505050815260200160028201546000191660001916815260200160038201805480602002602001604051908101604052809291908181526020018280548015611cd757602002820191906000526020600020905b81546000191681526020019060010190808311611cbf575b505050505081526020016004820160009054906101000a900460ff1615151515815250509050806000015181602001518260400151829250819150935093509350509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026000846000191660001916815260200190815260200160002060050160019054906101000a900460ff16151515611e0c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f412067726f757020776974682074686520676976656e20696420616c7265616481526020017f792065786973747300000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b3360026000856000191660001916815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816002600085600019166000191681526020019081526020016000206001019080519060200190611e9b929190613a3e565b506002600084600019166000191681526020019081526020016000206002013390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050806002600085600019166000191681526020019081526020016000206003019080519060200190611f509291906139be565b50600160026000856000191660001916815260200190815260200160002060050160016101000a81548160ff021916908315150217905550600160026000856000191660001916815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600260008560001916600019168152602001908152602001600020600601819055507fb78b34f3219f25d6305837697a0e5d110975d6be50317c9a2e815823306c35768360405180826000191660001916815260200191505060405180910390a1505050565b60008060026000846000191660001916815260200190815260200160002060020180549050600260008560001916600019168152602001908152602001600020600601548115156120b157fe5b069050600260008460001916600019168152602001908152602001600020600201818154811015156120df57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60008060008060008060006001885103965061212d876138cf565b95508594505b60008610151561233d57859450612149866138ed565b93505b868411151561232457600184019250849150878481518110151561216c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16888381518110151561219a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1610156121c4578391505b86831115801561222d575087838151811015156121dd57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16888381518110151561220b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16105b15612236578291505b848214156122495760018701935061231f565b878281518110151561225757fe5b906020019060200201519050878581518110151561227157fe5b90602001906020020151888381518110151561228957fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508088868151811015156122d457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081945061231c856138ed565b93505b61214c565b60008614156123325761233d565b600186039550612133565b5b600087111561260457878781518110151561235557fe5b90602001906020020151905087600081518110151561237057fe5b90602001906020020151888881518110151561238857fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808860008151811015156123d457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506001870396506000945061242460006138ed565b93505b86841115156125ff57600184019250849150878481518110151561244757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16888381518110151561247557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16101561249f578391505b868311158015612508575087838151811015156124b857fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1688838151811015156124e657fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16105b15612511578291505b84821415612524576001870193506125fa565b878281518110151561253257fe5b906020019060200201519050878581518110151561254c57fe5b90602001906020020151888381518110151561256457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508088868151811015156125af57fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508194506125f7856138ed565b93505b612427565b61233e565b5050505050505050565b6060806060600060026000866000191660001916815260200190815260200160002060050160019054906101000a900460ff1615156126b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f47726f757020646f6573206e6f7420657869737473000000000000000000000081525060200191505060405180910390fd5b60026000866000191660001916815260200190815260200160002060010160026000876000191660001916815260200190815260200160002060020160026000886000191660001916815260200190815260200160002060030161271888612064565b838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127ad5780601f10612782576101008083540402835291602001916127ad565b820191906000526020600020905b81548152906001019060200180831161279057829003601f168201915b505050505093508280548060200260200160405190810160405280929190818152602001828054801561283557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116127eb575b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128d15780601f106128a6576101008083540402835291602001916128d1565b820191906000526020600020905b8154815290600101906020018083116128b457829003601f168201915b5050505050915093509350935093509193509193565b6001151560026000846000191660001916815260200190815260200160002060040160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151415156129cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f557365722063616e206e6f74207265766f6b6520696e7669746520726967687481525060200191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff161515612ab5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e206e6f74207265766f6b6520696e766974652072696768742066726f6d81526020017f206e6f6e206578697374656e742075736572000000000000000000000000000081525060400191505060405180910390fd5b612abf82826132f1565b1515612b59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001807f43616e206e6f74207265766f6b6520696e766974652072696768742066726f6d81526020017f2061206e6f6e206d656d6265722075736572000000000000000000000000000081525060400191505060405180910390fd5b60026000836000191660001916815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612c61576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f43616e206e6f74207265766f6b6520696e766974652072696768742066726f6d81526020017f20746865206f776e65720000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600060026000846000191660001916815260200190815260200160002060040160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60026000826000191660001916815260200190815260200160002060050160019054906101000a900460ff161515612d79576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f67726f757020646f6573206e6f7420657869737400000000000000000000000081525060200191505060405180910390fd5b612d8381336132f1565b1515612df7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f75736572206973206e6f74206d656d626572206f662067726f7570000000000081525060200191505060405180910390fd5b60026000826000191660001916815260200190815260200160002060050160009054906101000a900460ff161515612ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001807f63616e206e6f74206368616e67652067726f7570206c65616465723a206b657981526020017f206973206e6f742064697274790000000000000000000000000000000000000081525060400191505060405180910390fd5b61012c6002600083600019166000191681526020019081526020016000206007015401421015612eec57612f3e565b6002600082600019166000191681526020019081526020016000206006016000815480929190600101919050555042600260008360001916600019168152602001908152602001600020600701819055505b50565b600080612f4e83336132f1565b1515612fe8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f55736572206973206e6f742061206d656d626572206f6620746865206769766581526020017f6e2067726f75700000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600160026000856000191660001916815260200190815260200160002060050160006101000a81548160ff021916908315150217905550600260008460001916600019168152602001908152602001600020600201805490509150600090505b818110156131e9573373ffffffffffffffffffffffffffffffffffffffff166002600085600019166000191681526020019081526020016000206002018281548110151561309257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156131dc576002600084600019166000191681526020019081526020016000206002016001830381548110151561310757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600085600019166000191681526020019081526020016000206002018281548110151561315d57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600084600019166000191681526020019081526020016000206002018054809190600190036131d69190613af3565b506131e9565b8080600101915050613048565b6002600084600019166000191681526020019081526020016000206006016000815480929190600101919050555042600260008560001916600019168152602001908152602001600020600701819055507f25fb633cf34b8ac24e12de001a84fab7ec7c321a0e852137fe1756c1b95be8db83336040518083600019166000191681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a17f7a62a3f0e82a73e51d73db7562eb8e80c8c18b2041e5ff6318baeaec91b4d2e18360405180826000191660001916815260200191505060405180910390a1505050565b600080600090505b600260008560001916600019168152602001908152602001600020600201805490508110156133c1578273ffffffffffffffffffffffffffffffffffffffff166002600086600019166000191681526020019081526020016000206002018281548110151561336457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156133b457600191506133c6565b80806001019150506132f9565b600091505b5092915050565b60008085518551141515613449576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642072206c656e6774680000000000000000000000000000000081525060200191505060405180910390fd5b855184511415156134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642073206c656e6774680000000000000000000000000000000081525060200191505060405180910390fd5b8551835114151561353b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f696e76616c69642076206c656e6774680000000000000000000000000000000081525060200191505060405180910390fd5b60028060008a600019166000191681526020019081526020016000206002018054905081151561356757fe5b0486511115156135df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f6e6f7420656e6f75676820617070726f76616c7300000000000000000000000081525060200191505060405180910390fd5b600090505b85518110156137b85761360e8887838151811015156135ff57fe5b906020019060200201516132f1565b15156136a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c8152602001807f696e76616c696420617070726f76616c3a2075736572206973206e6f7420612081526020017f67726f7570206d656d626572000000000000000000000000000000000000000081525060400191505060405180910390fd5b61371186828151811015156136b957fe5b906020019060200201518885848151811015156136d257fe5b9060200190602002015188858151811015156136ea57fe5b90602001906020020151888681518110151561370257fe5b90602001906020020151613902565b15156137ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f696e76616c696420617070726f76616c3a20696e76616c6964207369676e617481526020017f757265000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80806001019150506135e4565b6137c186612112565b600090505b85518110156138c05760008114156137dd576138b3565b85600182038151811015156137ee57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16868281518110151561381c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515156138b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f6475706c696361746520617070726f76616c732064657465637465640000000081525060200191505060405180910390fd5b5b80806001019150506137c6565b60019150509695505050505050565b6000806001830390506002818115156138e457fe5b04915050919050565b60008060028302905060018101915050919050565b60008573ffffffffffffffffffffffffffffffffffffffff16600186868686604051600081526020016040526040518085600019166000191681526020018460ff1660ff1681526020018360001916600019168152602001826000191660001916815260200194505050505060206040516020810390808403906000865af1158015613992573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff1614905095945050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106139ff57805160ff1916838001178555613a2d565b82800160010185558215613a2d579182015b82811115613a2c578251825591602001919060010190613a11565b5b509050613a3a9190613b1f565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613a7f57805160ff1916838001178555613aad565b82800160010185558215613aad579182015b82811115613aac578251825591602001919060010190613a91565b5b509050613aba9190613b1f565b5090565b60a060405190810160405280606081526020016060815260200160008019168152602001606081526020016000151581525090565b815481835581811115613b1a57818360005260206000209182019101613b199190613b1f565b5b505050565b613b4191905b80821115613b3d576000816000905550600101613b25565b5090565b905600a165627a7a72305820124fc6b7390d3f411ca90065b82379dee3775ddfaa66947e91c70d88068238420029`

// DeployEth deploys a new Ethereum contract, binding an instance of Eth to it.
func DeployEth(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Eth, error) {
	parsed, err := abi.JSON(strings.NewReader(EthABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(EthBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Eth{EthCaller: EthCaller{contract: contract}, EthTransactor: EthTransactor{contract: contract}, EthFilterer: EthFilterer{contract: contract}}, nil
}

// Eth is an auto generated Go binding around an Ethereum contract.
type Eth struct {
	EthCaller     // Read-only binding to the contract
	EthTransactor // Write-only binding to the contract
	EthFilterer   // Log filterer for contract events
}

// EthCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthSession struct {
	Contract     *Eth              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthCallerSession struct {
	Contract *EthCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// EthTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthTransactorSession struct {
	Contract     *EthTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthRaw struct {
	Contract *Eth // Generic contract binding to access the raw methods on
}

// EthCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthCallerRaw struct {
	Contract *EthCaller // Generic read-only contract binding to access the raw methods on
}

// EthTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthTransactorRaw struct {
	Contract *EthTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEth creates a new instance of Eth, bound to a specific deployed contract.
func NewEth(address common.Address, backend bind.ContractBackend) (*Eth, error) {
	contract, err := bindEth(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Eth{EthCaller: EthCaller{contract: contract}, EthTransactor: EthTransactor{contract: contract}, EthFilterer: EthFilterer{contract: contract}}, nil
}

// NewEthCaller creates a new read-only instance of Eth, bound to a specific deployed contract.
func NewEthCaller(address common.Address, caller bind.ContractCaller) (*EthCaller, error) {
	contract, err := bindEth(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthCaller{contract: contract}, nil
}

// NewEthTransactor creates a new write-only instance of Eth, bound to a specific deployed contract.
func NewEthTransactor(address common.Address, transactor bind.ContractTransactor) (*EthTransactor, error) {
	contract, err := bindEth(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthTransactor{contract: contract}, nil
}

// NewEthFilterer creates a new log filterer instance of Eth, bound to a specific deployed contract.
func NewEthFilterer(address common.Address, filterer bind.ContractFilterer) (*EthFilterer, error) {
	contract, err := bindEth(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthFilterer{contract: contract}, nil
}

// bindEth binds a generic wrapper to an already deployed contract.
func bindEth(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Eth *EthRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Eth.Contract.EthCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Eth *EthRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Eth.Contract.EthTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Eth *EthRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Eth.Contract.EthTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Eth *EthCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Eth.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Eth *EthTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Eth.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Eth *EthTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Eth.Contract.contract.Transact(opts, method, params...)
}

// GetGroup is a free data retrieval call binding the contract method 0xb567d4ba.
//
// Solidity: function getGroup(groupId bytes32) constant returns(name string, members address[], ipfsHash bytes, leader address)
func (_Eth *EthCaller) GetGroup(opts *bind.CallOpts, groupId [32]byte) (struct {
	Name     string
	Members  []common.Address
	IpfsHash []byte
	Leader   common.Address
}, error) {
	ret := new(struct {
		Name     string
		Members  []common.Address
		IpfsHash []byte
		Leader   common.Address
	})
	out := ret
	err := _Eth.contract.Call(opts, out, "getGroup", groupId)
	return *ret, err
}

// GetGroup is a free data retrieval call binding the contract method 0xb567d4ba.
//
// Solidity: function getGroup(groupId bytes32) constant returns(name string, members address[], ipfsHash bytes, leader address)
func (_Eth *EthSession) GetGroup(groupId [32]byte) (struct {
	Name     string
	Members  []common.Address
	IpfsHash []byte
	Leader   common.Address
}, error) {
	return _Eth.Contract.GetGroup(&_Eth.CallOpts, groupId)
}

// GetGroup is a free data retrieval call binding the contract method 0xb567d4ba.
//
// Solidity: function getGroup(groupId bytes32) constant returns(name string, members address[], ipfsHash bytes, leader address)
func (_Eth *EthCallerSession) GetGroup(groupId [32]byte) (struct {
	Name     string
	Members  []common.Address
	IpfsHash []byte
	Leader   common.Address
}, error) {
	return _Eth.Contract.GetGroup(&_Eth.CallOpts, groupId)
}

// GetLeader is a free data retrieval call binding the contract method 0x9d163167.
//
// Solidity: function getLeader(groupId bytes32) constant returns(address)
func (_Eth *EthCaller) GetLeader(opts *bind.CallOpts, groupId [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Eth.contract.Call(opts, out, "getLeader", groupId)
	return *ret0, err
}

// GetLeader is a free data retrieval call binding the contract method 0x9d163167.
//
// Solidity: function getLeader(groupId bytes32) constant returns(address)
func (_Eth *EthSession) GetLeader(groupId [32]byte) (common.Address, error) {
	return _Eth.Contract.GetLeader(&_Eth.CallOpts, groupId)
}

// GetLeader is a free data retrieval call binding the contract method 0x9d163167.
//
// Solidity: function getLeader(groupId bytes32) constant returns(address)
func (_Eth *EthCallerSession) GetLeader(groupId [32]byte) (common.Address, error) {
	return _Eth.Contract.GetLeader(&_Eth.CallOpts, groupId)
}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(id address) constant returns(string, string, bytes32)
func (_Eth *EthCaller) GetUser(opts *bind.CallOpts, id common.Address) (string, string, [32]byte, error) {
	var (
		ret0 = new(string)
		ret1 = new(string)
		ret2 = new([32]byte)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
	}
	err := _Eth.contract.Call(opts, out, "getUser", id)
	return *ret0, *ret1, *ret2, err
}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(id address) constant returns(string, string, bytes32)
func (_Eth *EthSession) GetUser(id common.Address) (string, string, [32]byte, error) {
	return _Eth.Contract.GetUser(&_Eth.CallOpts, id)
}

// GetUser is a free data retrieval call binding the contract method 0x6f77926b.
//
// Solidity: function getUser(id address) constant returns(string, string, bytes32)
func (_Eth *EthCallerSession) GetUser(id common.Address) (string, string, [32]byte, error) {
	return _Eth.Contract.GetUser(&_Eth.CallOpts, id)
}

// IsUserRegistered is a free data retrieval call binding the contract method 0x163f7522.
//
// Solidity: function isUserRegistered(id address) constant returns(bool)
func (_Eth *EthCaller) IsUserRegistered(opts *bind.CallOpts, id common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Eth.contract.Call(opts, out, "isUserRegistered", id)
	return *ret0, err
}

// IsUserRegistered is a free data retrieval call binding the contract method 0x163f7522.
//
// Solidity: function isUserRegistered(id address) constant returns(bool)
func (_Eth *EthSession) IsUserRegistered(id common.Address) (bool, error) {
	return _Eth.Contract.IsUserRegistered(&_Eth.CallOpts, id)
}

// IsUserRegistered is a free data retrieval call binding the contract method 0x163f7522.
//
// Solidity: function isUserRegistered(id address) constant returns(bool)
func (_Eth *EthCallerSession) IsUserRegistered(id common.Address) (bool, error) {
	return _Eth.Contract.IsUserRegistered(&_Eth.CallOpts, id)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Eth *EthCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Eth.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Eth *EthSession) Owner() (common.Address, error) {
	return _Eth.Contract.Owner(&_Eth.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_Eth *EthCallerSession) Owner() (common.Address, error) {
	return _Eth.Contract.Owner(&_Eth.CallOpts)
}

// ChangeGroupKey is a paid mutator transaction binding the contract method 0x1cf51f36.
//
// Solidity: function changeGroupKey(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthTransactor) ChangeGroupKey(opts *bind.TransactOpts, groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "changeGroupKey", groupId, newIpfsHash, members, rs, ss, vs)
}

// ChangeGroupKey is a paid mutator transaction binding the contract method 0x1cf51f36.
//
// Solidity: function changeGroupKey(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthSession) ChangeGroupKey(groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.Contract.ChangeGroupKey(&_Eth.TransactOpts, groupId, newIpfsHash, members, rs, ss, vs)
}

// ChangeGroupKey is a paid mutator transaction binding the contract method 0x1cf51f36.
//
// Solidity: function changeGroupKey(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthTransactorSession) ChangeGroupKey(groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.Contract.ChangeGroupKey(&_Eth.TransactOpts, groupId, newIpfsHash, members, rs, ss, vs)
}

// ChangeLeader is a paid mutator transaction binding the contract method 0xf59c5b8e.
//
// Solidity: function changeLeader(groupId bytes32) returns()
func (_Eth *EthTransactor) ChangeLeader(opts *bind.TransactOpts, groupId [32]byte) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "changeLeader", groupId)
}

// ChangeLeader is a paid mutator transaction binding the contract method 0xf59c5b8e.
//
// Solidity: function changeLeader(groupId bytes32) returns()
func (_Eth *EthSession) ChangeLeader(groupId [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.ChangeLeader(&_Eth.TransactOpts, groupId)
}

// ChangeLeader is a paid mutator transaction binding the contract method 0xf59c5b8e.
//
// Solidity: function changeLeader(groupId bytes32) returns()
func (_Eth *EthTransactorSession) ChangeLeader(groupId [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.ChangeLeader(&_Eth.TransactOpts, groupId)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x90bc9bed.
//
// Solidity: function createGroup(id bytes32, name string, ipfsHash bytes) returns()
func (_Eth *EthTransactor) CreateGroup(opts *bind.TransactOpts, id [32]byte, name string, ipfsHash []byte) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "createGroup", id, name, ipfsHash)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x90bc9bed.
//
// Solidity: function createGroup(id bytes32, name string, ipfsHash bytes) returns()
func (_Eth *EthSession) CreateGroup(id [32]byte, name string, ipfsHash []byte) (*types.Transaction, error) {
	return _Eth.Contract.CreateGroup(&_Eth.TransactOpts, id, name, ipfsHash)
}

// CreateGroup is a paid mutator transaction binding the contract method 0x90bc9bed.
//
// Solidity: function createGroup(id bytes32, name string, ipfsHash bytes) returns()
func (_Eth *EthTransactorSession) CreateGroup(id [32]byte, name string, ipfsHash []byte) (*types.Transaction, error) {
	return _Eth.Contract.CreateGroup(&_Eth.TransactOpts, id, name, ipfsHash)
}

// GrantInviteRight is a paid mutator transaction binding the contract method 0x0754813a.
//
// Solidity: function grantInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthTransactor) GrantInviteRight(opts *bind.TransactOpts, groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "grantInviteRight", groupId, member)
}

// GrantInviteRight is a paid mutator transaction binding the contract method 0x0754813a.
//
// Solidity: function grantInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthSession) GrantInviteRight(groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.Contract.GrantInviteRight(&_Eth.TransactOpts, groupId, member)
}

// GrantInviteRight is a paid mutator transaction binding the contract method 0x0754813a.
//
// Solidity: function grantInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthTransactorSession) GrantInviteRight(groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.Contract.GrantInviteRight(&_Eth.TransactOpts, groupId, member)
}

// HeapSort is a paid mutator transaction binding the contract method 0xabab02b5.
//
// Solidity: function heapSort(self address[]) returns()
func (_Eth *EthTransactor) HeapSort(opts *bind.TransactOpts, self []common.Address) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "heapSort", self)
}

// HeapSort is a paid mutator transaction binding the contract method 0xabab02b5.
//
// Solidity: function heapSort(self address[]) returns()
func (_Eth *EthSession) HeapSort(self []common.Address) (*types.Transaction, error) {
	return _Eth.Contract.HeapSort(&_Eth.TransactOpts, self)
}

// HeapSort is a paid mutator transaction binding the contract method 0xabab02b5.
//
// Solidity: function heapSort(self address[]) returns()
func (_Eth *EthTransactorSession) HeapSort(self []common.Address) (*types.Transaction, error) {
	return _Eth.Contract.HeapSort(&_Eth.TransactOpts, self)
}

// InviteUser is a paid mutator transaction binding the contract method 0x691d2669.
//
// Solidity: function inviteUser(groupId bytes32, newMember address, hasInviteRight bool) returns()
func (_Eth *EthTransactor) InviteUser(opts *bind.TransactOpts, groupId [32]byte, newMember common.Address, hasInviteRight bool) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "inviteUser", groupId, newMember, hasInviteRight)
}

// InviteUser is a paid mutator transaction binding the contract method 0x691d2669.
//
// Solidity: function inviteUser(groupId bytes32, newMember address, hasInviteRight bool) returns()
func (_Eth *EthSession) InviteUser(groupId [32]byte, newMember common.Address, hasInviteRight bool) (*types.Transaction, error) {
	return _Eth.Contract.InviteUser(&_Eth.TransactOpts, groupId, newMember, hasInviteRight)
}

// InviteUser is a paid mutator transaction binding the contract method 0x691d2669.
//
// Solidity: function inviteUser(groupId bytes32, newMember address, hasInviteRight bool) returns()
func (_Eth *EthTransactorSession) InviteUser(groupId [32]byte, newMember common.Address, hasInviteRight bool) (*types.Transaction, error) {
	return _Eth.Contract.InviteUser(&_Eth.TransactOpts, groupId, newMember, hasInviteRight)
}

// LeaveGroup is a paid mutator transaction binding the contract method 0xf931544b.
//
// Solidity: function leaveGroup(groupId bytes32) returns()
func (_Eth *EthTransactor) LeaveGroup(opts *bind.TransactOpts, groupId [32]byte) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "leaveGroup", groupId)
}

// LeaveGroup is a paid mutator transaction binding the contract method 0xf931544b.
//
// Solidity: function leaveGroup(groupId bytes32) returns()
func (_Eth *EthSession) LeaveGroup(groupId [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.LeaveGroup(&_Eth.TransactOpts, groupId)
}

// LeaveGroup is a paid mutator transaction binding the contract method 0xf931544b.
//
// Solidity: function leaveGroup(groupId bytes32) returns()
func (_Eth *EthTransactorSession) LeaveGroup(groupId [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.LeaveGroup(&_Eth.TransactOpts, groupId)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x68f6d82a.
//
// Solidity: function registerUser(name string, ipfsPeerId string, boxingKey bytes32) returns()
func (_Eth *EthTransactor) RegisterUser(opts *bind.TransactOpts, name string, ipfsPeerId string, boxingKey [32]byte) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "registerUser", name, ipfsPeerId, boxingKey)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x68f6d82a.
//
// Solidity: function registerUser(name string, ipfsPeerId string, boxingKey bytes32) returns()
func (_Eth *EthSession) RegisterUser(name string, ipfsPeerId string, boxingKey [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.RegisterUser(&_Eth.TransactOpts, name, ipfsPeerId, boxingKey)
}

// RegisterUser is a paid mutator transaction binding the contract method 0x68f6d82a.
//
// Solidity: function registerUser(name string, ipfsPeerId string, boxingKey bytes32) returns()
func (_Eth *EthTransactorSession) RegisterUser(name string, ipfsPeerId string, boxingKey [32]byte) (*types.Transaction, error) {
	return _Eth.Contract.RegisterUser(&_Eth.TransactOpts, name, ipfsPeerId, boxingKey)
}

// RevokeInviteRight is a paid mutator transaction binding the contract method 0xeab7894f.
//
// Solidity: function revokeInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthTransactor) RevokeInviteRight(opts *bind.TransactOpts, groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "revokeInviteRight", groupId, member)
}

// RevokeInviteRight is a paid mutator transaction binding the contract method 0xeab7894f.
//
// Solidity: function revokeInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthSession) RevokeInviteRight(groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.Contract.RevokeInviteRight(&_Eth.TransactOpts, groupId, member)
}

// RevokeInviteRight is a paid mutator transaction binding the contract method 0xeab7894f.
//
// Solidity: function revokeInviteRight(groupId bytes32, member address) returns()
func (_Eth *EthTransactorSession) RevokeInviteRight(groupId [32]byte, member common.Address) (*types.Transaction, error) {
	return _Eth.Contract.RevokeInviteRight(&_Eth.TransactOpts, groupId, member)
}

// UpdateGroupIpfsHash is a paid mutator transaction binding the contract method 0x38f007b6.
//
// Solidity: function updateGroupIpfsHash(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthTransactor) UpdateGroupIpfsHash(opts *bind.TransactOpts, groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.contract.Transact(opts, "updateGroupIpfsHash", groupId, newIpfsHash, members, rs, ss, vs)
}

// UpdateGroupIpfsHash is a paid mutator transaction binding the contract method 0x38f007b6.
//
// Solidity: function updateGroupIpfsHash(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthSession) UpdateGroupIpfsHash(groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.Contract.UpdateGroupIpfsHash(&_Eth.TransactOpts, groupId, newIpfsHash, members, rs, ss, vs)
}

// UpdateGroupIpfsHash is a paid mutator transaction binding the contract method 0x38f007b6.
//
// Solidity: function updateGroupIpfsHash(groupId bytes32, newIpfsHash bytes, members address[], rs bytes32[], ss bytes32[], vs uint8[]) returns()
func (_Eth *EthTransactorSession) UpdateGroupIpfsHash(groupId [32]byte, newIpfsHash []byte, members []common.Address, rs [][32]byte, ss [][32]byte, vs []uint8) (*types.Transaction, error) {
	return _Eth.Contract.UpdateGroupIpfsHash(&_Eth.TransactOpts, groupId, newIpfsHash, members, rs, ss, vs)
}

// EthDebugIterator is returned from FilterDebug and is used to iterate over the raw logs and unpacked data for Debug events raised by the Eth contract.
type EthDebugIterator struct {
	Event *EthDebug // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthDebugIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthDebug)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthDebug)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthDebugIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthDebugIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthDebug represents a Debug event raised by the Eth contract.
type EthDebug struct {
	Msg *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterDebug is a free log retrieval operation binding the contract event 0xaad112e1b1cb380614d4d2c495b213d9ed63560382320d6a49cc64793149f93c.
//
// Solidity: e Debug(msg int256)
func (_Eth *EthFilterer) FilterDebug(opts *bind.FilterOpts) (*EthDebugIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return &EthDebugIterator{contract: _Eth.contract, event: "Debug", logs: logs, sub: sub}, nil
}

// WatchDebug is a free log subscription operation binding the contract event 0xaad112e1b1cb380614d4d2c495b213d9ed63560382320d6a49cc64793149f93c.
//
// Solidity: e Debug(msg int256)
func (_Eth *EthFilterer) WatchDebug(opts *bind.WatchOpts, sink chan<- *EthDebug) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthDebug)
				if err := _Eth.contract.UnpackLog(event, "Debug", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthGroupInvitationIterator is returned from FilterGroupInvitation and is used to iterate over the raw logs and unpacked data for GroupInvitation events raised by the Eth contract.
type EthGroupInvitationIterator struct {
	Event *EthGroupInvitation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthGroupInvitationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthGroupInvitation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthGroupInvitation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthGroupInvitationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthGroupInvitationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthGroupInvitation represents a GroupInvitation event raised by the Eth contract.
type EthGroupInvitation struct {
	From    common.Address
	To      common.Address
	GroupId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGroupInvitation is a free log retrieval operation binding the contract event 0x9478e2f0a42543d96af3b3661efc5aaa23dd42c9f8c970c1e4f4bd01ab42374a.
//
// Solidity: e GroupInvitation(from address, to address, groupId bytes32)
func (_Eth *EthFilterer) FilterGroupInvitation(opts *bind.FilterOpts) (*EthGroupInvitationIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "GroupInvitation")
	if err != nil {
		return nil, err
	}
	return &EthGroupInvitationIterator{contract: _Eth.contract, event: "GroupInvitation", logs: logs, sub: sub}, nil
}

// WatchGroupInvitation is a free log subscription operation binding the contract event 0x9478e2f0a42543d96af3b3661efc5aaa23dd42c9f8c970c1e4f4bd01ab42374a.
//
// Solidity: e GroupInvitation(from address, to address, groupId bytes32)
func (_Eth *EthFilterer) WatchGroupInvitation(opts *bind.WatchOpts, sink chan<- *EthGroupInvitation) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "GroupInvitation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthGroupInvitation)
				if err := _Eth.contract.UnpackLog(event, "GroupInvitation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthGroupKeyChangedIterator is returned from FilterGroupKeyChanged and is used to iterate over the raw logs and unpacked data for GroupKeyChanged events raised by the Eth contract.
type EthGroupKeyChangedIterator struct {
	Event *EthGroupKeyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthGroupKeyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthGroupKeyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthGroupKeyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthGroupKeyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthGroupKeyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthGroupKeyChanged represents a GroupKeyChanged event raised by the Eth contract.
type EthGroupKeyChanged struct {
	GroupId  [32]byte
	IpfsHash []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterGroupKeyChanged is a free log retrieval operation binding the contract event 0xb5388ad25b89556150d437427d042f64e13a2f2bf6030e5ac7764495362edad0.
//
// Solidity: e GroupKeyChanged(groupId bytes32, ipfsHash bytes)
func (_Eth *EthFilterer) FilterGroupKeyChanged(opts *bind.FilterOpts) (*EthGroupKeyChangedIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "GroupKeyChanged")
	if err != nil {
		return nil, err
	}
	return &EthGroupKeyChangedIterator{contract: _Eth.contract, event: "GroupKeyChanged", logs: logs, sub: sub}, nil
}

// WatchGroupKeyChanged is a free log subscription operation binding the contract event 0xb5388ad25b89556150d437427d042f64e13a2f2bf6030e5ac7764495362edad0.
//
// Solidity: e GroupKeyChanged(groupId bytes32, ipfsHash bytes)
func (_Eth *EthFilterer) WatchGroupKeyChanged(opts *bind.WatchOpts, sink chan<- *EthGroupKeyChanged) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "GroupKeyChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthGroupKeyChanged)
				if err := _Eth.contract.UnpackLog(event, "GroupKeyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthGroupLeftIterator is returned from FilterGroupLeft and is used to iterate over the raw logs and unpacked data for GroupLeft events raised by the Eth contract.
type EthGroupLeftIterator struct {
	Event *EthGroupLeft // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthGroupLeftIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthGroupLeft)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthGroupLeft)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthGroupLeftIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthGroupLeftIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthGroupLeft represents a GroupLeft event raised by the Eth contract.
type EthGroupLeft struct {
	GroupId [32]byte
	User    common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterGroupLeft is a free log retrieval operation binding the contract event 0x25fb633cf34b8ac24e12de001a84fab7ec7c321a0e852137fe1756c1b95be8db.
//
// Solidity: e GroupLeft(groupId bytes32, user address)
func (_Eth *EthFilterer) FilterGroupLeft(opts *bind.FilterOpts) (*EthGroupLeftIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "GroupLeft")
	if err != nil {
		return nil, err
	}
	return &EthGroupLeftIterator{contract: _Eth.contract, event: "GroupLeft", logs: logs, sub: sub}, nil
}

// WatchGroupLeft is a free log subscription operation binding the contract event 0x25fb633cf34b8ac24e12de001a84fab7ec7c321a0e852137fe1756c1b95be8db.
//
// Solidity: e GroupLeft(groupId bytes32, user address)
func (_Eth *EthFilterer) WatchGroupLeft(opts *bind.WatchOpts, sink chan<- *EthGroupLeft) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "GroupLeft")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthGroupLeft)
				if err := _Eth.contract.UnpackLog(event, "GroupLeft", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthGroupRegisteredIterator is returned from FilterGroupRegistered and is used to iterate over the raw logs and unpacked data for GroupRegistered events raised by the Eth contract.
type EthGroupRegisteredIterator struct {
	Event *EthGroupRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthGroupRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthGroupRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthGroupRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthGroupRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthGroupRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthGroupRegistered represents a GroupRegistered event raised by the Eth contract.
type EthGroupRegistered struct {
	Id  [32]byte
	Raw types.Log // Blockchain specific contextual infos
}

// FilterGroupRegistered is a free log retrieval operation binding the contract event 0xb78b34f3219f25d6305837697a0e5d110975d6be50317c9a2e815823306c3576.
//
// Solidity: e GroupRegistered(id bytes32)
func (_Eth *EthFilterer) FilterGroupRegistered(opts *bind.FilterOpts) (*EthGroupRegisteredIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "GroupRegistered")
	if err != nil {
		return nil, err
	}
	return &EthGroupRegisteredIterator{contract: _Eth.contract, event: "GroupRegistered", logs: logs, sub: sub}, nil
}

// WatchGroupRegistered is a free log subscription operation binding the contract event 0xb78b34f3219f25d6305837697a0e5d110975d6be50317c9a2e815823306c3576.
//
// Solidity: e GroupRegistered(id bytes32)
func (_Eth *EthFilterer) WatchGroupRegistered(opts *bind.WatchOpts, sink chan<- *EthGroupRegistered) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "GroupRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthGroupRegistered)
				if err := _Eth.contract.UnpackLog(event, "GroupRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthGroupUpdateIpfsHashIterator is returned from FilterGroupUpdateIpfsHash and is used to iterate over the raw logs and unpacked data for GroupUpdateIpfsHash events raised by the Eth contract.
type EthGroupUpdateIpfsHashIterator struct {
	Event *EthGroupUpdateIpfsHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthGroupUpdateIpfsHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthGroupUpdateIpfsHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthGroupUpdateIpfsHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthGroupUpdateIpfsHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthGroupUpdateIpfsHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthGroupUpdateIpfsHash represents a GroupUpdateIpfsHash event raised by the Eth contract.
type EthGroupUpdateIpfsHash struct {
	GroupId  [32]byte
	IpfsHash []byte
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterGroupUpdateIpfsHash is a free log retrieval operation binding the contract event 0x54f7f672bf7abc702d283d4028997d3c86d75e43fdbd6c425b50d1d5cdb2229f.
//
// Solidity: e GroupUpdateIpfsHash(groupId bytes32, ipfsHash bytes)
func (_Eth *EthFilterer) FilterGroupUpdateIpfsHash(opts *bind.FilterOpts) (*EthGroupUpdateIpfsHashIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "GroupUpdateIpfsHash")
	if err != nil {
		return nil, err
	}
	return &EthGroupUpdateIpfsHashIterator{contract: _Eth.contract, event: "GroupUpdateIpfsHash", logs: logs, sub: sub}, nil
}

// WatchGroupUpdateIpfsHash is a free log subscription operation binding the contract event 0x54f7f672bf7abc702d283d4028997d3c86d75e43fdbd6c425b50d1d5cdb2229f.
//
// Solidity: e GroupUpdateIpfsHash(groupId bytes32, ipfsHash bytes)
func (_Eth *EthFilterer) WatchGroupUpdateIpfsHash(opts *bind.WatchOpts, sink chan<- *EthGroupUpdateIpfsHash) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "GroupUpdateIpfsHash")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthGroupUpdateIpfsHash)
				if err := _Eth.contract.UnpackLog(event, "GroupUpdateIpfsHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthKeyDirtyIterator is returned from FilterKeyDirty and is used to iterate over the raw logs and unpacked data for KeyDirty events raised by the Eth contract.
type EthKeyDirtyIterator struct {
	Event *EthKeyDirty // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthKeyDirtyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthKeyDirty)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthKeyDirty)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthKeyDirtyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthKeyDirtyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthKeyDirty represents a KeyDirty event raised by the Eth contract.
type EthKeyDirty struct {
	GroupId [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterKeyDirty is a free log retrieval operation binding the contract event 0x7a62a3f0e82a73e51d73db7562eb8e80c8c18b2041e5ff6318baeaec91b4d2e1.
//
// Solidity: e KeyDirty(groupId bytes32)
func (_Eth *EthFilterer) FilterKeyDirty(opts *bind.FilterOpts) (*EthKeyDirtyIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "KeyDirty")
	if err != nil {
		return nil, err
	}
	return &EthKeyDirtyIterator{contract: _Eth.contract, event: "KeyDirty", logs: logs, sub: sub}, nil
}

// WatchKeyDirty is a free log subscription operation binding the contract event 0x7a62a3f0e82a73e51d73db7562eb8e80c8c18b2041e5ff6318baeaec91b4d2e1.
//
// Solidity: e KeyDirty(groupId bytes32)
func (_Eth *EthFilterer) WatchKeyDirty(opts *bind.WatchOpts, sink chan<- *EthKeyDirty) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "KeyDirty")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthKeyDirty)
				if err := _Eth.contract.UnpackLog(event, "KeyDirty", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// EthUserRegisteredIterator is returned from FilterUserRegistered and is used to iterate over the raw logs and unpacked data for UserRegistered events raised by the Eth contract.
type EthUserRegisteredIterator struct {
	Event *EthUserRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthUserRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthUserRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthUserRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthUserRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthUserRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthUserRegistered represents a UserRegistered event raised by the Eth contract.
type EthUserRegistered struct {
	Addr common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterUserRegistered is a free log retrieval operation binding the contract event 0x54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9.
//
// Solidity: e UserRegistered(addr address)
func (_Eth *EthFilterer) FilterUserRegistered(opts *bind.FilterOpts) (*EthUserRegisteredIterator, error) {

	logs, sub, err := _Eth.contract.FilterLogs(opts, "UserRegistered")
	if err != nil {
		return nil, err
	}
	return &EthUserRegisteredIterator{contract: _Eth.contract, event: "UserRegistered", logs: logs, sub: sub}, nil
}

// WatchUserRegistered is a free log subscription operation binding the contract event 0x54db7a5cb4735e1aac1f53db512d3390390bb6637bd30ad4bf9fc98667d9b9b9.
//
// Solidity: e UserRegistered(addr address)
func (_Eth *EthFilterer) WatchUserRegistered(opts *bind.WatchOpts, sink chan<- *EthUserRegistered) (event.Subscription, error) {

	logs, sub, err := _Eth.contract.WatchLogs(opts, "UserRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthUserRegistered)
				if err := _Eth.contract.UnpackLog(event, "UserRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
