// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package GroupDkg

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// GroupDkgABI is the input ABI used to generate the binding from.
const GroupDkgABI = "[{\"inputs\":[{\"internalType\":\"contractIGroup\",\"name\":\"group\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"DebugProofG1\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"DebugProofG2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"committerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG1\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG2\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rootPrvCommit\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"yG1\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"commitIpfsHash\",\"type\":\"string\"}],\"name\":\"NewCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consensus\",\"type\":\"address\"}],\"name\":\"NewComplaint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"ParticipantJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumGroupDkg.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"PhaseChange\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"VK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curNumCommittedLeft\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curPhase\",\"outputs\":[{\"internalType\":\"enumGroupDkg.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"ethPk\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootPrvCommit\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"commitIpfsHash\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postCommitTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"numParticipants\",\"type\":\"uint16\"}],\"name\":\"init\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"encPk\",\"type\":\"uint256[2]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"senderIndex\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootPubCommitG2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rootEncPrvCommit\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"yG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"string\",\"name\":\"commitIpfsHash\",\"type\":\"string\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"senderIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256[2]\",\"name\":\"vk\",\"type\":\"uint256[2]\"}],\"name\":\"postCommitTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"senderIndex\",\"type\":\"uint16\"}],\"name\":\"verifySubmittedKeySubmitTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGroupPK\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIdx\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIdx\",\"type\":\"uint16\"}],\"name\":\"complaintInvalidIpfsHash\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubCommitG1\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubCommitG2\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofG1\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofG2\",\"type\":\"bytes32[]\"}],\"name\":\"complaintPublicCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"complainerSk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"encPrvCommit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofPrvCommit\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"pubCommitsG1\",\"type\":\"uint256[2][]\"}],\"name\":\"complaintPrivateCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIdx\",\"type\":\"uint16\"}],\"name\":\"complaintVk\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32[2]\",\"name\":\"b\",\"type\":\"bytes32[2]\"}],\"name\":\"checkKeccak\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byts\",\"type\":\"bytes\"}],\"name\":\"leaves\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"name\":\"calcSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"l\",\"type\":\"uint256\"}],\"name\":\"newArr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byts\",\"type\":\"bytes\"}],\"name\":\"getMerkleRootTest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"checkMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantPkEnc\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"encPk\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantYG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"yG1\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantIsCommitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onConsensusSuccess\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"onConsensusFailure\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"threshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"x\",\"type\":\"uint16\"}],\"name\":\"uint16ToBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// GroupDkgBin is the compiled bytecode used for deploying new contracts.
var GroupDkgBin = "0x60c060405260016080818152600260a08190526200001f92919062000184565b5060405180608001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152506003906004620000d3929190620001cc565b50348015620000e157600080fd5b506040516200440238038062004402833981810160405260208110156200010757600080fd5b5051600080546001600160a01b0319163390811780835560405191926001600160a01b0391909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600f80546001600160a01b03909216620100000262010000600160b01b03199092169190911790556200021d565b8260028101928215620001ba579160200282015b82811115620001ba578251829060ff1690559160200191906001019062000198565b50620001c8929150620001fd565b5090565b8260048101928215620001ba579160200282015b82811115620001ba578251825591602001919060010190620001e0565b6200021a91905b80821115620001c8576000815560010162000204565b90565b6141d5806200022d6000396000f3fe6080604052600436106102675760003560e01c80637e2e5ddf11610144578063b6e7407a116100b6578063f2fde38b1161007a578063f2fde38b14610f61578063f34b6f8714610f94578063f75fbced14610fc2578063fb2990ad14610fec578063fe728a0214611001578063fe9fbb801461103757610267565b8063b6e7407a14610bda578063b8e0c82714610c8b578063d45d2dc914610e28578063dc73d61b14610edb578063dec7561e14610f3357610267565b806391252c901161010857806391252c9014610af357806391c46ba714610b0857806392d0d15314610b32578063a78a9dad14610b47578063ab5a315914610b5c578063b60095a514610bc557610267565b80637e2e5ddf1461090357806386e05f871461097e5780638d2a60b1146109ac5780638da5cb5b14610aad5780638f32d59b14610ade57610267565b8063445b01da116101dd57806365543f6e116101a157806365543f6e146105d35780636baa03f0146107555780636ce991fc146108345780636f04df411461085e578063715018a6146108d9578063786e2c24146108ee57610267565b8063445b01da1461049057806346d6d51b1461052d57806349abee50146105495780634a7f05691461055e5780635072fd111461059157610267565b80631d35b9e21161022f5780631d35b9e2146103ad578063247ddbdf146103d75780632e52d606146103ec578063341fb9cd14610418578063382421bc1461045157806342cde4e81461047b57610267565b806304bab8861461026c5780630d49dddf1461029357806313e62ed4146102bd57806315488b88146103605780631be3650714610375575b600080fd5b34801561027857600080fd5b5061028161106a565b60408051918252519081900360200190f35b34801561029f57600080fd5b50610281600480360360208110156102b657600080fd5b503561106f565b3480156102c957600080fd5b506102eb600480360360208110156102e057600080fd5b503561ffff16611083565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036c57600080fd5b506102816110ad565b34801561038157600080fd5b506103ab6004803603604081101561039857600080fd5b5061ffff813581169160200135166110b3565b005b3480156103b957600080fd5b50610281600480360360208110156103d057600080fd5b503561139b565b3480156103e357600080fd5b506102816113a8565b3480156103f857600080fd5b506104016113ad565b6040805161ffff9092168252519081900360200190f35b34801561042457600080fd5b5061042d6113bd565b6040518082600581111561043d57fe5b60ff16815260200191505060405180910390f35b34801561045d57600080fd5b506102816004803603602081101561047457600080fd5b50356113cd565b34801561048757600080fd5b506102816113da565b34801561049c57600080fd5b506103ab600480360360e08110156104b357600080fd5b61ffff8235169160208101359160408201359160608101359160808201919081019060e0810160c0820135600160201b8111156104ef57600080fd5b82018360208201111561050157600080fd5b803590602001918460018302840111600160201b8311171561052257600080fd5b5090925090506113e5565b6104016004803603604081101561054357600080fd5b50611663565b34801561055557600080fd5b5061028161193c565b34801561056a57600080fd5b506103ab6004803603606081101561058157600080fd5b5061ffff81351690602001611942565b34801561059d57600080fd5b506105bf600480360360208110156105b457600080fd5b503561ffff16611ab6565b604080519115158252519081900360200190f35b3480156105df57600080fd5b506103ab600480360360c08110156105f657600080fd5b61ffff823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561063057600080fd5b82018360208201111561064257600080fd5b803590602001918460208302840111600160201b8311171561066357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156106b257600080fd5b8201836020820111156106c457600080fd5b803590602001918460408302840111600160201b831117156106e557600080fd5b9190808060200260200160405190810160405280939291908181526020016000905b828210156107455760408051808201825290808402870190600290839083908082843760009201919091525050508152600190910190602001610707565b50939650611ad295505050505050565b34801561076157600080fd5b506107836004803603602081101561077857600080fd5b503561ffff166120a2565b60405180876001600160a01b03166001600160a01b031681526020018681526020018581526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b838110156107f45781810151838201526020016107dc565b50505050905090810190601f1680156108215780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561084057600080fd5b506102816004803603602081101561085757600080fd5b5035612173565b34801561086a57600080fd5b506103ab6004803603602081101561088157600080fd5b810190602081018135600160201b81111561089b57600080fd5b8201836020820111156108ad57600080fd5b803590602001918460018302840111600160201b831117156108ce57600080fd5b509092509050612184565b3480156108e557600080fd5b506103ab61221f565b3480156108fa57600080fd5b5061040161227a565b34801561090f57600080fd5b506103ab6004803603602081101561092657600080fd5b810190602081018135600160201b81111561094057600080fd5b82018360208201111561095257600080fd5b803590602001918460018302840111600160201b8311171561097357600080fd5b50909250905061228b565b34801561098a57600080fd5b506103ab600480360360208110156109a157600080fd5b503561ffff16612362565b3480156109b857600080fd5b50610a5d600480360360208110156109cf57600080fd5b810190602081018135600160201b8111156109e957600080fd5b8201836020820111156109fb57600080fd5b803590602001918460018302840111600160201b83111715610a1c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612530945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610a99578181015183820152602001610a81565b505050509050019250505060405180910390f35b348015610ab957600080fd5b50610ac26125d2565b604080516001600160a01b039092168252519081900360200190f35b348015610aea57600080fd5b506105bf6125e1565b348015610aff57600080fd5b506104016125f2565b348015610b1457600080fd5b5061028160048036036020811015610b2b57600080fd5b5035612603565b348015610b3e57600080fd5b50610401612642565b348015610b5357600080fd5b506103ab61264c565b348015610b6857600080fd5b50610b8a60048036036020811015610b7f57600080fd5b503561ffff16612743565b6040518082600260200280838360005b83811015610bb2578181015183820152602001610b9a565b5050505090500191505060405180910390f35b348015610bd157600080fd5b50610281612796565b348015610be657600080fd5b5061028160048036036020811015610bfd57600080fd5b810190602081018135600160201b811115610c1757600080fd5b820183602082011115610c2957600080fd5b803590602001918460018302840111600160201b83111715610c4a57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061279b945050505050565b348015610c9757600080fd5b506103ab6004803603610140811015610caf57600080fd5b60408051808201825261ffff843581169460208101359091169381019290916080830191808401906002908390839080828437600092019190915250506040805160808181019092529295949381810193925090600490839083908082843760009201919091525091949392602081019250359050600160201b811115610d3557600080fd5b820183602082011115610d4757600080fd5b803590602001918460208302840111600160201b83111715610d6857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610db757600080fd5b820183602082011115610dc957600080fd5b803590602001918460208302840111600160201b83111715610dea57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612848945050505050565b348015610e3457600080fd5b506105bf60048036036060811015610e4b57600080fd5b810190602081018135600160201b811115610e6557600080fd5b820183602082011115610e7757600080fd5b803590602001918460208302840111600160201b83111715610e9857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135612e13565b348015610ee757600080fd5b5061028160048036036040811015610efe57600080fd5b60408051808201825291830192918183019183906002908390839080828437600092019190915250919450612e289350505050565b348015610f3f57600080fd5b50610b8a60048036036020811015610f5657600080fd5b503561ffff16612e7d565b348015610f6d57600080fd5b506103ab60048036036020811015610f8457600080fd5b50356001600160a01b0316612ecf565b348015610fa057600080fd5b506103ab60048036036020811015610fb757600080fd5b503561ffff16612eec565b348015610fce57600080fd5b50610fd7612fac565b60405181518152808260808083836020610b9a565b348015610ff857600080fd5b506103ab612fe7565b34801561100d57600080fd5b506103ab6004803603604081101561102457600080fd5b5061ffff813581169160200135166130d8565b34801561104357600080fd5b506105bf6004803603602081101561105a57600080fd5b50356001600160a01b03166131a5565b600581565b600b816004811061107c57fe5b0154905081565b60408051600280825281830190925260609160208201818038833950505060028101929092525090565b60075481565b61ffff82166000908152600a602052604090205482906001600160a01b03163314611113576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b600180600054600160a01b900460ff16600581111561112e57fe5b1461116e576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b601054604080516395184d3b60e01b815233600482015290516000926001600160a01b0316916395184d3b916024808301926020929190829003018186803b1580156111b957600080fd5b505afa1580156111cd573d6000803e3d6000fd5b505050506040513d60208110156111e357600080fd5b5051601054604080516315db206960e01b81526001600160a01b038085166004830152915193945060009391909216916315db206991602480830192602092919082900301818787803b15801561123957600080fd5b505af115801561124d573d6000803e3d6000fd5b505050506040513d602081101561126357600080fd5b50516001600160a01b0381166000818152601160205260409020805461ffff191661ffff8a1617905590915063bade603361129d87611083565b60006040518363ffffffff1660e01b81526004018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156112f15781810151838201526020016112d9565b50505050905090810190601f16801561131e5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561133e57600080fd5b505af1158015611352573d6000803e3d6000fd5b5050604080516001600160a01b038516815290517fcf30e67539832b20f8336652c666a6ac41c1037990e0b55b655d0ee9e1ac2eaa9350908190036020019150a1505050505050565b6001816002811061107c57fe5b600c81565b60085462010000900461ffff1681565b600054600160a01b900460ff1681565b6003816004811061107c57fe5b60085461ffff165b90565b600180600054600160a01b900460ff16600581111561140057fe5b14611440576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff88166000908152600a602052604090205488906001600160a01b031633146114a0576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b61ffff89166000908152600a602052604090206009015460ff1680156114c557600080fd5b61ffff8a166000908152600a60205260409020600381018a905560048101899055600581018890556114fc90600601876002613d6c565b5061ffff8a166000908152600a6020526040902061151e906008018686613daa565b5061ffff8a166000818152600a6020908152604091829020600901805460ff19166001179055815192835282018b90528181018a9052606082018990527f2e9f66bd1231f3916ccbdbfb9638f51d9e0f38e25b7bf8f354a57c75fa21babc918c918c918c918c918c918c918c916080820190859080828437600083820152601f01601f1916909101828103602090810182528101849052905060408101848480828437600083820152604051601f909101601f19169092018290039a509098505050505050505050a16008805467ffff000000000000198116600160301b9182900461ffff9081166000190190811692830291909117909255611656576000805460ff60a01b1916600160a11b17905543600955604080516002815290516000805160206140a5833981519152916020908290030190a15b5050505050505050505050565b60008080600054600160a01b900460ff16600581111561167f57fe5b146116bf576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b600854600160201b900461ffff163360015b8261ffff168161ffff161161174d5761ffff81166000908152600a60205260409020546001600160a01b0383811691161415611745576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a9bda5b995960921b604482015290519081900360640190fd5b6001016116d1565b5060408051610100810182526001600160a01b0383168152815180830183526001909401939091602083019190889060029083908390808284376000920182905250928452505060208083018290526040808401839052606084018390528051808201825283815280830184905260808501528051808301825283815260a085015260c090930182905261ffff86168252600a8152919020825181546001600160a01b0319166001600160a01b03909116178155908201516118159060018301906002613e17565b5060408201516003820155606082015160048201556080820151600582015560a08201516118499060068301906002613e17565b5060c08201518051611865916008840191602090910190613e45565b5060e091909101516009909101805460ff19169115159190911790556008805465ffff000000001916600160201b61ffff851690810291909117909155600114156118af57436009555b60085461ffff838116620100009092041614156118fd576000805460ff60a01b1916600160a01b179055604080516001815290516000805160206140a5833981519152916020908290030190a15b6040805161ffff8416815290517fc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a70939181900360200190a1509392505050565b60095481565b600280600054600160a01b900460ff16600581111561195d57fe5b1461199d576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff83166000908152600a602052604090205483906001600160a01b031633146119fd576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b60095443906005018111611a55576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6009819055600f805461ffff191661ffff8716179055611a78600b856002613eb2565b506000805460ff60a01b1916600360a01b179055604080516003815290516000805160206140a5833981519152916020908290030190a15050505050565b61ffff166000908152600a602052604090206009015460ff1690565b61ffff86166000908152600a602052604090205486906001600160a01b03163314611b32576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b600580600054600160a01b900460ff166005811115611b4d57fe5b1415611b8e576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b600480600054600160a01b900460ff166005811115611ba957fe5b1415611bea576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a161ffff88166000908152600a60205260409020600981015460ff16611c8757611c488a61322d565b600080516020613fe78339815191526040518080602001828103825260308152602001806140eb6030913960400191505060405180910390a150612097565b6040805160208082018a905282518083038201815282840193849052805190820120600585015460608085018290526080850183905285528a5160a08501528a5191947f318d363ded442e53a204d6dd6ba3d9b73e82c2d83d02e2fddf94a2c33db5ab6e948c9492938793839260c00191878201910280838360005b83811015611d1b578181015183820152602001611d03565b5050505090500194505050505060405180910390a1611d3f878360050154836132ee565b611d8c57611d4c8b61322d565b600080516020613fe783398151915260405180806020018281038252602c815260200180613fbb602c913960400191505060405180910390a15050612097565b61ffff8b166000908152600a602052604090819020905163776710d760e01b815273__ecOps_________________________________9163a688890691600191820191849163776710d791908f90600481019060440183825b815481526020019060010190808311611de557505082815260200192505050604080518083038186803b158015611e1b57600080fd5b505af4158015611e2f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015611e5457600080fd5b5060405160e084901b6001600160e01b0319168152600481019060440183825b815481526020019060010190808311611e745750839050604080838360005b83811015611eab578181015183820152602001611e93565b505050509050019250505060206040518083038186803b158015611ece57600080fd5b505af4158015611ee2573d6000803e3d6000fd5b505050506040513d6020811015611ef857600080fd5b5051611f5c57611f078b61322d565b604080516020808252601e908201527f696e76616c696420736b3a20736c617368656420636f6d706c61696e65720000818301529051600080516020613fe78339815191529181900360600190a15050612097565b8160030154611f6a87613398565b14611fb857611f788b61322d565b600080516020613fe783398151915260405180806020018281038252604181526020018061413d6041913960600191505060405180910390a15050612097565b6040805180820191829052600091611ff89190600186019060029082845b815481526020019060010190808311611fd65750505050508b8b60001b613454565b90506120058c8289613565565b1561205157600080516020613fe783398151915260405180806020018281038252602381526020018061417e6023913960400191505060405180910390a161204c8c61322d565b612093565b600080516020613fe783398151915260405180806020018281038252602281526020018061411b6022913960400191505060405180910390a16120938b61322d565b5050505b505050505050505050565b600a6020908152600091825260409182902080546003820154600483015460058401546008850180548851601f600260001960018516156101000201909316929092049182018990048902810189019099528089526001600160a01b03909516979396929591949193929091908301828280156121605780601f1061213557610100808354040283529160200191612160565b820191906000526020600020905b81548152906001019060200180831161214357829003601f168201915b5050506009909301549192505060ff1686565b600061217e826138ef565b92915050565b3360009081526011602052604090205461ffff16806121db576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b21031b0b63632b960911b604482015290519081900360640190fd5b6121e48161322d565b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a1505050565b6122276125e1565b61223057600080fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600854600160301b900461ffff1681565b3360009081526011602052604090205461ffff166122e1576040805162461bcd60e51b815260206004820152600e60248201526d34b73b30b634b21031b0b63632b960911b604482015290519081900360640190fd5b61232861232383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061392792505050565b61322d565b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a15050565b600380600054600160a01b900460ff16600581111561237d57fe5b146123bd576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff82166000908152600a602052604090205482906001600160a01b0316331461241d576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b60095443906005018111612475576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b600f5460405163163396eb60e01b8152620100009091046001600160a01b03169063163396eb90600b90600481019060840182825b8154815260200190600101908083116124aa575050915050600060405180830381600087803b1580156124dc57600080fd5b505af11580156124f0573d6000803e3d6000fd5b50506000805460ff60a01b1916600160a21b1790555050604080516003815290516000805160206140a5833981519152916020908290030190a150505050565b606080825160405190808252806020026020018201604052801561255e578160200160208202803883390190505b50905060005b83518110156125cb5783818151811061257957fe5b01602090810151604080516001600160f81b0319909216828401528051808303600101815260219092019052805191012082518390839081106125b857fe5b6020908102919091010152600101612564565b5092915050565b6000546001600160a01b031690565b6000546001600160a01b0316331490565b600854600160201b900461ffff1681565b60006060612610836138ef565b604051908082528060200260200182016040528015612639578160200160208202803883390190505b50519392505050565b60085461ffff1681565b600080600054600160a01b900460ff16600581111561266757fe5b146126a7576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6009544390600c0181116126ff576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a161273f600061322d565b5050565b61274b613edf565b61ffff82166000908152600a602052604090819020815180830190925260010160028282826020028201915b8154815260200190600101908083116127775750505050509050919050565b600b81565b6000606082516040519080825280602002602001820160405280156127ca578160200160208202803883390190505b50905060005b8351811015612837578381815181106127e557fe5b01602090810151604080516001600160f81b03199092168284015280518083036001018152602190920190528051910120825183908390811061282457fe5b60209081029190910101526001016127d0565b506128418161392e565b9392505050565b61ffff86166000908152600a602052604090205486906001600160a01b031633146128a8576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b600580600054600160a01b900460ff1660058111156128c357fe5b1415612904576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b600480600054600160a01b900460ff16600581111561291f57fe5b1415612960576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a161ffff88166000908152600a60205260409020600981015460ff166129fd576129be8a61322d565b600080516020613fe783398151915260405180806020018281038252602c815260200180614079602c913960400191505060405180910390a150612097565b6000886040516020018082600260200280838360005b83811015612a2b578181015183820152602001612a13565b505050509050019150506040516020818303038152906040528051906020012090507f5f709aeb9dc886ca80635b8a581b23dd510de58f991e2bbe69dc162efef32e7f878360030154836040518080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612ac1578181015183820152602001612aa9565b5050505090500194505050505060405180910390a1612ae5878360030154836132ee565b612b3257612af28b61322d565b600080516020613fe783398151915260405180806020018281038252602b815260200180613f90602b913960400191505060405180910390a15050612097565b6000886040516020018082600460200280838360005b83811015612b60578181015183820152602001612b48565b505050509050019150506040516020818303038152906040528051906020012090507f318d363ded442e53a204d6dd6ba3d9b73e82c2d83d02e2fddf94a2c33db5ab6e878460040154836040518080602001848152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612bf6578181015183820152602001612bde565b5050505090500194505050505060405180910390a1612c1a878460040154836132ee565b612c6857612c278c61322d565b600080516020613fe783398151915260405180806020018281038252602b815260200180614027602b913960400191505060405180910390a1505050612097565b73__ecOps_________________________________6349ac97d18b600360018d6040518563ffffffff1660e01b81526004018085600260200280838360005b83811015612cbf578181015183820152602001612ca7565b5050509201915085905060046020028201915b815481526020019060010190808311612cd2575050604081019084905b815481526020019060010190808311612cef5750839050608080838360005b83811015612d26578181015183820152602001612d0e565b5050505090500194505050505060206040518083038186803b158015612d4b57600080fd5b505af4158015612d5f573d6000803e3d6000fd5b505050506040513d6020811015612d7557600080fd5b505115612dc357612d858c61322d565b600080516020613fe78339815191526040518080602001828103825260278152602001806140526027913960400191505060405180910390a1612093565b612dcc8b61322d565b600080516020613fe78339815191526040518080602001828103825260268152602001806140c56026913960400191505060405180910390a1505050505050505050505050565b6000612e208484846132ee565b949350505050565b6000816040516020018082600260200280838360005b83811015612e56578181015183820152602001612e3e565b50505050905001915050604051602081830303815290604052805190602001209050919050565b612e85613edf565b61ffff82166000908152600a602052604090819020815180830190925260060160028282826020028201918154815260200190600101908083116127775750505050509050919050565b612ed76125e1565b612ee057600080fd5b612ee981613b02565b50565b61ffff81166000908152600a602052604090205481906001600160a01b03163314612f4c576040805162461bcd60e51b81526020600482015260156024820152600080516020614007833981519152604482015290519081900360640190fd5b600380600054600160a01b900460ff166005811115612f6757fe5b14612fa7576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b505050565b612fb4613efd565b60408051608081019182905290600b9060049082845b815481526020019060010190808311612fca575050505050905090565b600180600054600160a01b900460ff16600581111561300257fe5b14613042576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6009544390600b01811161309a576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6000805460ff60a01b1916600560a01b179055604080516005815290516000805160206140a5833981519152916020908290030190a161273f613b70565b6008805461ffff191661ffff8481169190911763ffff00001916620100009184169182021767ffff0000000000001916600160301b9190910217905560008054819060ff60a01b1916600160a01b82021790555060085461ffff808216620100009092041611801561314f575060085461ffff1615155b61318e576040805162461bcd60e51b815260206004820152600b60248201526a1ddc9bdb99c81a5b9c1d5d60aa1b604482015290519081900360640190fd5b50506008805465ffff000000001916905543600955565b600f546040805163288c314960e21b81526001600160a01b03848116600483015291516000936201000090049092169163a230c52491602480820192602092909190829003018186803b1580156131fb57600080fd5b505afa15801561320f573d6000803e3d6000fd5b505050506040513d602081101561322557600080fd5b505192915050565b60085461ffff600160201b909104811690600090831661325c578161ffff16478161325457fe5b049050613270565b6001820361ffff16478161326c57fe5b0490505b60015b8260010161ffff168161ffff1610156132e8578361ffff168161ffff16146132e05761ffff81166000908152600a60205260408082205490516001600160a01b039091169184156108fc02918591818181858888f193505050501580156132de573d6000803e3d6000fd5b505b600101613273565b50505050565b600081815b855181101561338d57600086828151811061330a57fe5b60200260200101519050808310156133525782816040516020018083815260200182815260200192505050604051602081830303815290604052805190602001209250613384565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b506001016132f3565b509092149392505050565b6000606082516040519080825280602002602001820160405280156133c7578160200160208202803883390190505b50905060005b8351811015612837578381815181106133e257fe5b60200260200101516040516020018082600260200280838360005b838110156134155781810151838201526020016133fd565b505050509050019150506040516020818303038152906040528051906020012082828151811061344157fe5b60209081029190910101526001016133cd565b60008073__ecOps_________________________________63776710d786866040518363ffffffff1660e01b81526004018083600260200280838360005b838110156134aa578181015183820152602001613492565b5050505090500182815260200192505050604080518083038186803b1580156134d257600080fd5b505af41580156134e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561350b57600080fd5b5060408051602001908190839080838360005b8381101561353657818101518382015260200161351e565b505050509050019150506040516020818303038152906040528051906020012090508083189150509392505050565b600061356f613edf565b613577613edf565b61357f613edf565b60405163776710d760e01b815273__ecOps_________________________________9063776710d7906001908990600481019060440183825b8154815260200190600101908083116135b857505082815260200192505050604080518083038186803b1580156135ee57600080fd5b505af4158015613602573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561362757600080fd5b50905060005b60085461ffff908116600101811690821610156138165773__ecOps_________________________________63776710d7878361ffff168151811061366e57fe5b60200260200101518361ffff168b61ffff160a6040518363ffffffff1660e01b81526004018083600260200280838360005b838110156136b85781810151838201526020016136a0565b505050509050018261ffff16815260200192505050604080518083038186803b1580156136e457600080fd5b505af41580156136f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561371d57600080fd5b50935061ffff81166137315783925061380e565b73__ecOps_________________________________63e9d1c41f84866040518363ffffffff1660e01b81526004018083600260200280838360005b8381101561378457818101518382015260200161376c565b5050505090500182600260200280838360005b838110156137af578181015183820152602001613797565b5050505090500192505050604080518083038186803b1580156137d157600080fd5b505af41580156137e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561380a57600080fd5b5092505b60010161362d565b5073__ecOps_________________________________63a688890682846040518363ffffffff1660e01b81526004018083600260200280838360005b8381101561386a578181015183820152602001613852565b5050505090500182600260200280838360005b8381101561389557818101518382015260200161387d565b505050509050019250505060206040518083038186803b1580156138b857600080fd5b505af41580156138cc573d6000803e3d6000fd5b505050506040513d60208110156138e257600080fd5b5051979650505050505050565b60008181805b600183111561391c578291508101600282049250818360020214613917576001015b6138f5565b600101949350505050565b6002015190565b60008061393b83516138ef565b9050606081604051908082528060200260200182016040528015613969578160200160208202803883390190505b50905060005b84518110156139ab5784818151811061398457fe5b602002602001015182828151811061399857fe5b602090810291909101015260010161396f565b5083516000905b83811015613ae0578282600101815181106139c957fe5b60200260200101518383815181106139dd57fe5b60200260200101511015613a60578282815181106139f757fe5b6020026020010151838360010181518110613a0e57fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120838281518110613a4f57fe5b602002602001018181525050613ad1565b828260010181518110613a6f57fe5b6020026020010151838381518110613a8357fe5b6020026020010151604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120838281518110613ac457fe5b6020026020010181815250505b600291909101906001016139b2565b826001820381518110613aef57fe5b6020026020010151945050505050919050565b6001600160a01b038116613b1557600080fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60085461ffff600160201b8204811691600160301b9004811682039060009082164781613b9957fe5b04905060015b8360010161ffff168161ffff1610156132e857613bba613f1b565b61ffff82166000908152600a602090815260409182902082516101008101845281546001600160a01b0316815283518085019485905290939192840191600184019060029082845b815481526020019060010190808311613c025750505091835250506003820154602082015260048201546040808301919091526005830154606083015280518082019182905260809092019190600684019060029082845b815481526020019060010190808311613c5a57505050918352505060088201805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152938201939291830182828015613d015780601f10613cd657610100808354040283529160200191613d01565b820191906000526020600020905b815481529060010190602001808311613ce457829003601f168201915b50505091835250506009919091015460ff16151560209091015260e081015190915015613d635780516040516001600160a01b039091169084156108fc029085906000818181858888f19350505050158015613d61573d6000803e3d6000fd5b505b50600101613b9f565b8260028101928215613d9a579160200282015b82811115613d9a578235825591602001919060010190613d7f565b50613da6929150613f75565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613deb5782800160ff19823516178555613d9a565b82800160010185558215613d9a5791820182811115613d9a578235825591602001919060010190613d7f565b8260028101928215613d9a579160200282015b82811115613d9a578251825591602001919060010190613e2a565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10613e8657805160ff1916838001178555613d9a565b82800160010185558215613d9a5791820182811115613d9a578251825591602001919060010190613e2a565b8260048101928215613d9a5791602002820182811115613d9a578235825591602001919060010190613d7f565b60405180604001604052806002906020820280388339509192915050565b60405180608001604052806004906020820280388339509192915050565b60405180610100016040528060006001600160a01b03168152602001613f3f613edf565b8152600060208201819052604082018190526060820152608001613f61613edf565b815260606020820152600060409091015290565b6113e291905b80821115613da65760008155600101613f7b56fe696e76616c6964206d65726b6c652070726f6f662047313a20736c617368656420636f6d706c61696e6572696e76616c6964206d65726b6c652070726f6f66207072763a20736c617368656420636f6d706c61696e65727cdb51e9dbbc205231228146c3246e7f914aa6d4a33170e43ecc8e3593481d1a6e6f7420617574686f72697a65642073656e6465720000000000000000000000696e76616c6964206d65726b6c652070726f6f662047323a20736c617368656420636f6d706c61696e657270616972696e672077617320636f72726563743a20736c617368656420636f6d706c61696e65726163637573656420686173206e6f7420636f6d6d746965643a20736c617368656420636f6d706c61696e6572ed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f70616972696e672077617320696e636f72726563743a20736c617368656420616363757365646163637573656420686173206e6f7420636f6d6d69746564207965743a20736c617368656420636f6d706c61696e6572696e636f72726563742070616972696e673a20736c61736865642061636375736564696e76616c696420473120636f6d6d6974733a206d65726b6c6520726f6f747320646f206e6f74206d617463683a20736c617368656420636f6d706c61696e6572636f72726563742070616972696e673a20736c617368656420636f6d706c61696e6572a265627a7a72315820d3b429a945979f8a518ca4c38ac4e7da2dbe2f6a28ed7d578c1d8b6e6a543a9464736f6c634300050f0032"

// DeployGroupDkg deploys a new Ethereum contract, binding an instance of GroupDkg to it.
func DeployGroupDkg(auth *bind.TransactOpts, backend bind.ContractBackend, group common.Address) (common.Address, *types.Transaction, *GroupDkg, error) {
	parsed, err := abi.JSON(strings.NewReader(GroupDkgABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(GroupDkgBin), backend, group)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &GroupDkg{GroupDkgCaller: GroupDkgCaller{contract: contract}, GroupDkgTransactor: GroupDkgTransactor{contract: contract}, GroupDkgFilterer: GroupDkgFilterer{contract: contract}}, nil
}

// GroupDkg is an auto generated Go binding around an Ethereum contract.
type GroupDkg struct {
	GroupDkgCaller     // Read-only binding to the contract
	GroupDkgTransactor // Write-only binding to the contract
	GroupDkgFilterer   // Log filterer for contract events
}

// GroupDkgCaller is an auto generated read-only Go binding around an Ethereum contract.
type GroupDkgCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GroupDkgTransactor is an auto generated write-only Go binding around an Ethereum contract.
type GroupDkgTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GroupDkgFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type GroupDkgFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// GroupDkgSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type GroupDkgSession struct {
	Contract     *GroupDkg         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// GroupDkgCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type GroupDkgCallerSession struct {
	Contract *GroupDkgCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// GroupDkgTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type GroupDkgTransactorSession struct {
	Contract     *GroupDkgTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// GroupDkgRaw is an auto generated low-level Go binding around an Ethereum contract.
type GroupDkgRaw struct {
	Contract *GroupDkg // Generic contract binding to access the raw methods on
}

// GroupDkgCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type GroupDkgCallerRaw struct {
	Contract *GroupDkgCaller // Generic read-only contract binding to access the raw methods on
}

// GroupDkgTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type GroupDkgTransactorRaw struct {
	Contract *GroupDkgTransactor // Generic write-only contract binding to access the raw methods on
}

// NewGroupDkg creates a new instance of GroupDkg, bound to a specific deployed contract.
func NewGroupDkg(address common.Address, backend bind.ContractBackend) (*GroupDkg, error) {
	contract, err := bindGroupDkg(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &GroupDkg{GroupDkgCaller: GroupDkgCaller{contract: contract}, GroupDkgTransactor: GroupDkgTransactor{contract: contract}, GroupDkgFilterer: GroupDkgFilterer{contract: contract}}, nil
}

// NewGroupDkgCaller creates a new read-only instance of GroupDkg, bound to a specific deployed contract.
func NewGroupDkgCaller(address common.Address, caller bind.ContractCaller) (*GroupDkgCaller, error) {
	contract, err := bindGroupDkg(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &GroupDkgCaller{contract: contract}, nil
}

// NewGroupDkgTransactor creates a new write-only instance of GroupDkg, bound to a specific deployed contract.
func NewGroupDkgTransactor(address common.Address, transactor bind.ContractTransactor) (*GroupDkgTransactor, error) {
	contract, err := bindGroupDkg(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &GroupDkgTransactor{contract: contract}, nil
}

// NewGroupDkgFilterer creates a new log filterer instance of GroupDkg, bound to a specific deployed contract.
func NewGroupDkgFilterer(address common.Address, filterer bind.ContractFilterer) (*GroupDkgFilterer, error) {
	contract, err := bindGroupDkg(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &GroupDkgFilterer{contract: contract}, nil
}

// bindGroupDkg binds a generic wrapper to an already deployed contract.
func bindGroupDkg(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(GroupDkgABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GroupDkg *GroupDkgRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GroupDkg.Contract.GroupDkgCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GroupDkg *GroupDkgRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GroupDkg.Contract.GroupDkgTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GroupDkg *GroupDkgRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GroupDkg.Contract.GroupDkgTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_GroupDkg *GroupDkgCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _GroupDkg.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_GroupDkg *GroupDkgTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GroupDkg.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_GroupDkg *GroupDkgTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _GroupDkg.Contract.contract.Transact(opts, method, params...)
}

// VK is a free data retrieval call binding the contract method 0x0d49dddf.
//
// Solidity: function VK(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) VK(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "VK", arg0)
	return *ret0, err
}

// VK is a free data retrieval call binding the contract method 0x0d49dddf.
//
// Solidity: function VK(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgSession) VK(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.VK(&_GroupDkg.CallOpts, arg0)
}

// VK is a free data retrieval call binding the contract method 0x0d49dddf.
//
// Solidity: function VK(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) VK(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.VK(&_GroupDkg.CallOpts, arg0)
}

// CalcSize is a free data retrieval call binding the contract method 0x6ce991fc.
//
// Solidity: function calcSize(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) CalcSize(opts *bind.CallOpts, l *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "calcSize", l)
	return *ret0, err
}

// CalcSize is a free data retrieval call binding the contract method 0x6ce991fc.
//
// Solidity: function calcSize(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgSession) CalcSize(l *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.CalcSize(&_GroupDkg.CallOpts, l)
}

// CalcSize is a free data retrieval call binding the contract method 0x6ce991fc.
//
// Solidity: function calcSize(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) CalcSize(l *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.CalcSize(&_GroupDkg.CallOpts, l)
}

// CheckKeccak is a free data retrieval call binding the contract method 0xdc73d61b.
//
// Solidity: function checkKeccak(bytes32[2] b) constant returns(bytes32)
func (_GroupDkg *GroupDkgCaller) CheckKeccak(opts *bind.CallOpts, b [2][32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "checkKeccak", b)
	return *ret0, err
}

// CheckKeccak is a free data retrieval call binding the contract method 0xdc73d61b.
//
// Solidity: function checkKeccak(bytes32[2] b) constant returns(bytes32)
func (_GroupDkg *GroupDkgSession) CheckKeccak(b [2][32]byte) ([32]byte, error) {
	return _GroupDkg.Contract.CheckKeccak(&_GroupDkg.CallOpts, b)
}

// CheckKeccak is a free data retrieval call binding the contract method 0xdc73d61b.
//
// Solidity: function checkKeccak(bytes32[2] b) constant returns(bytes32)
func (_GroupDkg *GroupDkgCallerSession) CheckKeccak(b [2][32]byte) ([32]byte, error) {
	return _GroupDkg.Contract.CheckKeccak(&_GroupDkg.CallOpts, b)
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) CommitTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "commitTimeout")
	return *ret0, err
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) CommitTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.CommitTimeout(&_GroupDkg.CallOpts)
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) CommitTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.CommitTimeout(&_GroupDkg.CallOpts)
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_GroupDkg *GroupDkgCaller) CurN(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "curN")
	return *ret0, err
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_GroupDkg *GroupDkgSession) CurN() (uint16, error) {
	return _GroupDkg.Contract.CurN(&_GroupDkg.CallOpts)
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_GroupDkg *GroupDkgCallerSession) CurN() (uint16, error) {
	return _GroupDkg.Contract.CurN(&_GroupDkg.CallOpts)
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_GroupDkg *GroupDkgCaller) CurNumCommittedLeft(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "curNumCommittedLeft")
	return *ret0, err
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_GroupDkg *GroupDkgSession) CurNumCommittedLeft() (uint16, error) {
	return _GroupDkg.Contract.CurNumCommittedLeft(&_GroupDkg.CallOpts)
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_GroupDkg *GroupDkgCallerSession) CurNumCommittedLeft() (uint16, error) {
	return _GroupDkg.Contract.CurNumCommittedLeft(&_GroupDkg.CallOpts)
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_GroupDkg *GroupDkgCaller) CurPhase(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "curPhase")
	return *ret0, err
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_GroupDkg *GroupDkgSession) CurPhase() (uint8, error) {
	return _GroupDkg.Contract.CurPhase(&_GroupDkg.CallOpts)
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_GroupDkg *GroupDkgCallerSession) CurPhase() (uint8, error) {
	return _GroupDkg.Contract.CurPhase(&_GroupDkg.CallOpts)
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) DepositWei(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "depositWei")
	return *ret0, err
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) DepositWei() (*big.Int, error) {
	return _GroupDkg.Contract.DepositWei(&_GroupDkg.CallOpts)
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) DepositWei() (*big.Int, error) {
	return _GroupDkg.Contract.DepositWei(&_GroupDkg.CallOpts)
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) G1(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "g1", arg0)
	return *ret0, err
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgSession) G1(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.G1(&_GroupDkg.CallOpts, arg0)
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) G1(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.G1(&_GroupDkg.CallOpts, arg0)
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) G2(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "g2", arg0)
	return *ret0, err
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgSession) G2(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.G2(&_GroupDkg.CallOpts, arg0)
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) G2(arg0 *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.G2(&_GroupDkg.CallOpts, arg0)
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[4])
func (_GroupDkg *GroupDkgCaller) GetGroupPK(opts *bind.CallOpts) ([4]*big.Int, error) {
	var (
		ret0 = new([4]*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "getGroupPK")
	return *ret0, err
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[4])
func (_GroupDkg *GroupDkgSession) GetGroupPK() ([4]*big.Int, error) {
	return _GroupDkg.Contract.GetGroupPK(&_GroupDkg.CallOpts)
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[4])
func (_GroupDkg *GroupDkgCallerSession) GetGroupPK() ([4]*big.Int, error) {
	return _GroupDkg.Contract.GetGroupPK(&_GroupDkg.CallOpts)
}

// GetMerkleRootTest is a free data retrieval call binding the contract method 0xb6e7407a.
//
// Solidity: function getMerkleRootTest(bytes byts) constant returns(bytes32)
func (_GroupDkg *GroupDkgCaller) GetMerkleRootTest(opts *bind.CallOpts, byts []byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "getMerkleRootTest", byts)
	return *ret0, err
}

// GetMerkleRootTest is a free data retrieval call binding the contract method 0xb6e7407a.
//
// Solidity: function getMerkleRootTest(bytes byts) constant returns(bytes32)
func (_GroupDkg *GroupDkgSession) GetMerkleRootTest(byts []byte) ([32]byte, error) {
	return _GroupDkg.Contract.GetMerkleRootTest(&_GroupDkg.CallOpts, byts)
}

// GetMerkleRootTest is a free data retrieval call binding the contract method 0xb6e7407a.
//
// Solidity: function getMerkleRootTest(bytes byts) constant returns(bytes32)
func (_GroupDkg *GroupDkgCallerSession) GetMerkleRootTest(byts []byte) ([32]byte, error) {
	return _GroupDkg.Contract.GetMerkleRootTest(&_GroupDkg.CallOpts, byts)
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_GroupDkg *GroupDkgCaller) GetParticipantIsCommitted(opts *bind.CallOpts, participantIndex uint16) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "getParticipantIsCommitted", participantIndex)
	return *ret0, err
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_GroupDkg *GroupDkgSession) GetParticipantIsCommitted(participantIndex uint16) (bool, error) {
	return _GroupDkg.Contract.GetParticipantIsCommitted(&_GroupDkg.CallOpts, participantIndex)
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_GroupDkg *GroupDkgCallerSession) GetParticipantIsCommitted(participantIndex uint16) (bool, error) {
	return _GroupDkg.Contract.GetParticipantIsCommitted(&_GroupDkg.CallOpts, participantIndex)
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_GroupDkg *GroupDkgCaller) GetParticipantPkEnc(opts *bind.CallOpts, participantIndex uint16) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "getParticipantPkEnc", participantIndex)
	return *ret0, err
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_GroupDkg *GroupDkgSession) GetParticipantPkEnc(participantIndex uint16) ([2]*big.Int, error) {
	return _GroupDkg.Contract.GetParticipantPkEnc(&_GroupDkg.CallOpts, participantIndex)
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_GroupDkg *GroupDkgCallerSession) GetParticipantPkEnc(participantIndex uint16) ([2]*big.Int, error) {
	return _GroupDkg.Contract.GetParticipantPkEnc(&_GroupDkg.CallOpts, participantIndex)
}

// GetParticipantYG1 is a free data retrieval call binding the contract method 0xdec7561e.
//
// Solidity: function getParticipantYG1(uint16 participantIndex) constant returns(uint256[2] yG1)
func (_GroupDkg *GroupDkgCaller) GetParticipantYG1(opts *bind.CallOpts, participantIndex uint16) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "getParticipantYG1", participantIndex)
	return *ret0, err
}

// GetParticipantYG1 is a free data retrieval call binding the contract method 0xdec7561e.
//
// Solidity: function getParticipantYG1(uint16 participantIndex) constant returns(uint256[2] yG1)
func (_GroupDkg *GroupDkgSession) GetParticipantYG1(participantIndex uint16) ([2]*big.Int, error) {
	return _GroupDkg.Contract.GetParticipantYG1(&_GroupDkg.CallOpts, participantIndex)
}

// GetParticipantYG1 is a free data retrieval call binding the contract method 0xdec7561e.
//
// Solidity: function getParticipantYG1(uint16 participantIndex) constant returns(uint256[2] yG1)
func (_GroupDkg *GroupDkgCallerSession) GetParticipantYG1(participantIndex uint16) ([2]*big.Int, error) {
	return _GroupDkg.Contract.GetParticipantYG1(&_GroupDkg.CallOpts, participantIndex)
}

// IsAuthorized is a free data retrieval call binding the contract method 0xfe9fbb80.
//
// Solidity: function isAuthorized(address sender) constant returns(bool)
func (_GroupDkg *GroupDkgCaller) IsAuthorized(opts *bind.CallOpts, sender common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "isAuthorized", sender)
	return *ret0, err
}

// IsAuthorized is a free data retrieval call binding the contract method 0xfe9fbb80.
//
// Solidity: function isAuthorized(address sender) constant returns(bool)
func (_GroupDkg *GroupDkgSession) IsAuthorized(sender common.Address) (bool, error) {
	return _GroupDkg.Contract.IsAuthorized(&_GroupDkg.CallOpts, sender)
}

// IsAuthorized is a free data retrieval call binding the contract method 0xfe9fbb80.
//
// Solidity: function isAuthorized(address sender) constant returns(bool)
func (_GroupDkg *GroupDkgCallerSession) IsAuthorized(sender common.Address) (bool, error) {
	return _GroupDkg.Contract.IsAuthorized(&_GroupDkg.CallOpts, sender)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_GroupDkg *GroupDkgCaller) IsOwner(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "isOwner")
	return *ret0, err
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_GroupDkg *GroupDkgSession) IsOwner() (bool, error) {
	return _GroupDkg.Contract.IsOwner(&_GroupDkg.CallOpts)
}

// IsOwner is a free data retrieval call binding the contract method 0x8f32d59b.
//
// Solidity: function isOwner() constant returns(bool)
func (_GroupDkg *GroupDkgCallerSession) IsOwner() (bool, error) {
	return _GroupDkg.Contract.IsOwner(&_GroupDkg.CallOpts)
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) JoinTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "joinTimeout")
	return *ret0, err
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) JoinTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.JoinTimeout(&_GroupDkg.CallOpts)
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) JoinTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.JoinTimeout(&_GroupDkg.CallOpts)
}

// Leaves is a free data retrieval call binding the contract method 0x8d2a60b1.
//
// Solidity: function leaves(bytes byts) constant returns(bytes32[])
func (_GroupDkg *GroupDkgCaller) Leaves(opts *bind.CallOpts, byts []byte) ([][32]byte, error) {
	var (
		ret0 = new([][32]byte)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "leaves", byts)
	return *ret0, err
}

// Leaves is a free data retrieval call binding the contract method 0x8d2a60b1.
//
// Solidity: function leaves(bytes byts) constant returns(bytes32[])
func (_GroupDkg *GroupDkgSession) Leaves(byts []byte) ([][32]byte, error) {
	return _GroupDkg.Contract.Leaves(&_GroupDkg.CallOpts, byts)
}

// Leaves is a free data retrieval call binding the contract method 0x8d2a60b1.
//
// Solidity: function leaves(bytes byts) constant returns(bytes32[])
func (_GroupDkg *GroupDkgCallerSession) Leaves(byts []byte) ([][32]byte, error) {
	return _GroupDkg.Contract.Leaves(&_GroupDkg.CallOpts, byts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_GroupDkg *GroupDkgCaller) N(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_GroupDkg *GroupDkgSession) N() (uint16, error) {
	return _GroupDkg.Contract.N(&_GroupDkg.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_GroupDkg *GroupDkgCallerSession) N() (uint16, error) {
	return _GroupDkg.Contract.N(&_GroupDkg.CallOpts)
}

// NewArr is a free data retrieval call binding the contract method 0x91c46ba7.
//
// Solidity: function newArr(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) NewArr(opts *bind.CallOpts, l *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "newArr", l)
	return *ret0, err
}

// NewArr is a free data retrieval call binding the contract method 0x91c46ba7.
//
// Solidity: function newArr(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgSession) NewArr(l *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.NewArr(&_GroupDkg.CallOpts, l)
}

// NewArr is a free data retrieval call binding the contract method 0x91c46ba7.
//
// Solidity: function newArr(uint256 l) constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) NewArr(l *big.Int) (*big.Int, error) {
	return _GroupDkg.Contract.NewArr(&_GroupDkg.CallOpts, l)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_GroupDkg *GroupDkgCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_GroupDkg *GroupDkgSession) Owner() (common.Address, error) {
	return _GroupDkg.Contract.Owner(&_GroupDkg.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_GroupDkg *GroupDkgCallerSession) Owner() (common.Address, error) {
	return _GroupDkg.Contract.Owner(&_GroupDkg.CallOpts)
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, string commitIpfsHash, bool isCommitted)
func (_GroupDkg *GroupDkgCaller) Participants(opts *bind.CallOpts, arg0 uint16) (struct {
	EthPk           common.Address
	RootPubCommitG1 [32]byte
	RootPubCommitG2 [32]byte
	RootPrvCommit   [32]byte
	CommitIpfsHash  string
	IsCommitted     bool
}, error) {
	ret := new(struct {
		EthPk           common.Address
		RootPubCommitG1 [32]byte
		RootPubCommitG2 [32]byte
		RootPrvCommit   [32]byte
		CommitIpfsHash  string
		IsCommitted     bool
	})
	out := ret
	err := _GroupDkg.contract.Call(opts, out, "participants", arg0)
	return *ret, err
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, string commitIpfsHash, bool isCommitted)
func (_GroupDkg *GroupDkgSession) Participants(arg0 uint16) (struct {
	EthPk           common.Address
	RootPubCommitG1 [32]byte
	RootPubCommitG2 [32]byte
	RootPrvCommit   [32]byte
	CommitIpfsHash  string
	IsCommitted     bool
}, error) {
	return _GroupDkg.Contract.Participants(&_GroupDkg.CallOpts, arg0)
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, string commitIpfsHash, bool isCommitted)
func (_GroupDkg *GroupDkgCallerSession) Participants(arg0 uint16) (struct {
	EthPk           common.Address
	RootPubCommitG1 [32]byte
	RootPubCommitG2 [32]byte
	RootPrvCommit   [32]byte
	CommitIpfsHash  string
	IsCommitted     bool
}, error) {
	return _GroupDkg.Contract.Participants(&_GroupDkg.CallOpts, arg0)
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) PhaseStart(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "phaseStart")
	return *ret0, err
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) PhaseStart() (*big.Int, error) {
	return _GroupDkg.Contract.PhaseStart(&_GroupDkg.CallOpts)
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) PhaseStart() (*big.Int, error) {
	return _GroupDkg.Contract.PhaseStart(&_GroupDkg.CallOpts)
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) PostCommitTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "postCommitTimeout")
	return *ret0, err
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) PostCommitTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.PostCommitTimeout(&_GroupDkg.CallOpts)
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) PostCommitTimeout() (*big.Int, error) {
	return _GroupDkg.Contract.PostCommitTimeout(&_GroupDkg.CallOpts)
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_GroupDkg *GroupDkgCaller) T(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "t")
	return *ret0, err
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_GroupDkg *GroupDkgSession) T() (uint16, error) {
	return _GroupDkg.Contract.T(&_GroupDkg.CallOpts)
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_GroupDkg *GroupDkgCallerSession) T() (uint16, error) {
	return _GroupDkg.Contract.T(&_GroupDkg.CallOpts)
}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() constant returns(uint256)
func (_GroupDkg *GroupDkgCaller) Threshold(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _GroupDkg.contract.Call(opts, out, "threshold")
	return *ret0, err
}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() constant returns(uint256)
func (_GroupDkg *GroupDkgSession) Threshold() (*big.Int, error) {
	return _GroupDkg.Contract.Threshold(&_GroupDkg.CallOpts)
}

// Threshold is a free data retrieval call binding the contract method 0x42cde4e8.
//
// Solidity: function threshold() constant returns(uint256)
func (_GroupDkg *GroupDkgCallerSession) Threshold() (*big.Int, error) {
	return _GroupDkg.Contract.Threshold(&_GroupDkg.CallOpts)
}

// CheckMerkleProof is a paid mutator transaction binding the contract method 0xd45d2dc9.
//
// Solidity: function checkMerkleProof(bytes32[] proof, bytes32 root, bytes32 leaf) returns(bool)
func (_GroupDkg *GroupDkgTransactor) CheckMerkleProof(opts *bind.TransactOpts, proof [][32]byte, root [32]byte, leaf [32]byte) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "checkMerkleProof", proof, root, leaf)
}

// CheckMerkleProof is a paid mutator transaction binding the contract method 0xd45d2dc9.
//
// Solidity: function checkMerkleProof(bytes32[] proof, bytes32 root, bytes32 leaf) returns(bool)
func (_GroupDkg *GroupDkgSession) CheckMerkleProof(proof [][32]byte, root [32]byte, leaf [32]byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.CheckMerkleProof(&_GroupDkg.TransactOpts, proof, root, leaf)
}

// CheckMerkleProof is a paid mutator transaction binding the contract method 0xd45d2dc9.
//
// Solidity: function checkMerkleProof(bytes32[] proof, bytes32 root, bytes32 leaf) returns(bool)
func (_GroupDkg *GroupDkgTransactorSession) CheckMerkleProof(proof [][32]byte, root [32]byte, leaf [32]byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.CheckMerkleProof(&_GroupDkg.TransactOpts, proof, root, leaf)
}

// Commit is a paid mutator transaction binding the contract method 0x445b01da.
//
// Solidity: function commit(uint16 senderIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootEncPrvCommit, uint256[2] yG1, string commitIpfsHash) returns()
func (_GroupDkg *GroupDkgTransactor) Commit(opts *bind.TransactOpts, senderIndex uint16, rootPubCommitG1 [32]byte, rootPubCommitG2 [32]byte, rootEncPrvCommit [32]byte, yG1 [2]*big.Int, commitIpfsHash string) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "commit", senderIndex, rootPubCommitG1, rootPubCommitG2, rootEncPrvCommit, yG1, commitIpfsHash)
}

// Commit is a paid mutator transaction binding the contract method 0x445b01da.
//
// Solidity: function commit(uint16 senderIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootEncPrvCommit, uint256[2] yG1, string commitIpfsHash) returns()
func (_GroupDkg *GroupDkgSession) Commit(senderIndex uint16, rootPubCommitG1 [32]byte, rootPubCommitG2 [32]byte, rootEncPrvCommit [32]byte, yG1 [2]*big.Int, commitIpfsHash string) (*types.Transaction, error) {
	return _GroupDkg.Contract.Commit(&_GroupDkg.TransactOpts, senderIndex, rootPubCommitG1, rootPubCommitG2, rootEncPrvCommit, yG1, commitIpfsHash)
}

// Commit is a paid mutator transaction binding the contract method 0x445b01da.
//
// Solidity: function commit(uint16 senderIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootEncPrvCommit, uint256[2] yG1, string commitIpfsHash) returns()
func (_GroupDkg *GroupDkgTransactorSession) Commit(senderIndex uint16, rootPubCommitG1 [32]byte, rootPubCommitG2 [32]byte, rootEncPrvCommit [32]byte, yG1 [2]*big.Int, commitIpfsHash string) (*types.Transaction, error) {
	return _GroupDkg.Contract.Commit(&_GroupDkg.TransactOpts, senderIndex, rootPubCommitG1, rootPubCommitG2, rootEncPrvCommit, yG1, commitIpfsHash)
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_GroupDkg *GroupDkgTransactor) CommitTimedOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "commitTimedOut")
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_GroupDkg *GroupDkgSession) CommitTimedOut() (*types.Transaction, error) {
	return _GroupDkg.Contract.CommitTimedOut(&_GroupDkg.TransactOpts)
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_GroupDkg *GroupDkgTransactorSession) CommitTimedOut() (*types.Transaction, error) {
	return _GroupDkg.Contract.CommitTimedOut(&_GroupDkg.TransactOpts)
}

// ComplaintInvalidIpfsHash is a paid mutator transaction binding the contract method 0x1be36507.
//
// Solidity: function complaintInvalidIpfsHash(uint16 complainerIdx, uint16 accusedIdx) returns()
func (_GroupDkg *GroupDkgTransactor) ComplaintInvalidIpfsHash(opts *bind.TransactOpts, complainerIdx uint16, accusedIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "complaintInvalidIpfsHash", complainerIdx, accusedIdx)
}

// ComplaintInvalidIpfsHash is a paid mutator transaction binding the contract method 0x1be36507.
//
// Solidity: function complaintInvalidIpfsHash(uint16 complainerIdx, uint16 accusedIdx) returns()
func (_GroupDkg *GroupDkgSession) ComplaintInvalidIpfsHash(complainerIdx uint16, accusedIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintInvalidIpfsHash(&_GroupDkg.TransactOpts, complainerIdx, accusedIdx)
}

// ComplaintInvalidIpfsHash is a paid mutator transaction binding the contract method 0x1be36507.
//
// Solidity: function complaintInvalidIpfsHash(uint16 complainerIdx, uint16 accusedIdx) returns()
func (_GroupDkg *GroupDkgTransactorSession) ComplaintInvalidIpfsHash(complainerIdx uint16, accusedIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintInvalidIpfsHash(&_GroupDkg.TransactOpts, complainerIdx, accusedIdx)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x65543f6e.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk, uint256 encPrvCommit, bytes32[] proofPrvCommit, uint256[2][] pubCommitsG1) returns()
func (_GroupDkg *GroupDkgTransactor) ComplaintPrivateCommit(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int, encPrvCommit *big.Int, proofPrvCommit [][32]byte, pubCommitsG1 [][2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "complaintPrivateCommit", complainerIndex, accusedIndex, complainerSk, encPrvCommit, proofPrvCommit, pubCommitsG1)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x65543f6e.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk, uint256 encPrvCommit, bytes32[] proofPrvCommit, uint256[2][] pubCommitsG1) returns()
func (_GroupDkg *GroupDkgSession) ComplaintPrivateCommit(complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int, encPrvCommit *big.Int, proofPrvCommit [][32]byte, pubCommitsG1 [][2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintPrivateCommit(&_GroupDkg.TransactOpts, complainerIndex, accusedIndex, complainerSk, encPrvCommit, proofPrvCommit, pubCommitsG1)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x65543f6e.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk, uint256 encPrvCommit, bytes32[] proofPrvCommit, uint256[2][] pubCommitsG1) returns()
func (_GroupDkg *GroupDkgTransactorSession) ComplaintPrivateCommit(complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int, encPrvCommit *big.Int, proofPrvCommit [][32]byte, pubCommitsG1 [][2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintPrivateCommit(&_GroupDkg.TransactOpts, complainerIndex, accusedIndex, complainerSk, encPrvCommit, proofPrvCommit, pubCommitsG1)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xb8e0c827.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint256[2] pubCommitG1, uint256[4] pubCommitG2, bytes32[] proofG1, bytes32[] proofG2) returns()
func (_GroupDkg *GroupDkgTransactor) ComplaintPublicCommit(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, pubCommitG1 [2]*big.Int, pubCommitG2 [4]*big.Int, proofG1 [][32]byte, proofG2 [][32]byte) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "complaintPublicCommit", complainerIndex, accusedIndex, pubCommitG1, pubCommitG2, proofG1, proofG2)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xb8e0c827.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint256[2] pubCommitG1, uint256[4] pubCommitG2, bytes32[] proofG1, bytes32[] proofG2) returns()
func (_GroupDkg *GroupDkgSession) ComplaintPublicCommit(complainerIndex uint16, accusedIndex uint16, pubCommitG1 [2]*big.Int, pubCommitG2 [4]*big.Int, proofG1 [][32]byte, proofG2 [][32]byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintPublicCommit(&_GroupDkg.TransactOpts, complainerIndex, accusedIndex, pubCommitG1, pubCommitG2, proofG1, proofG2)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xb8e0c827.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint256[2] pubCommitG1, uint256[4] pubCommitG2, bytes32[] proofG1, bytes32[] proofG2) returns()
func (_GroupDkg *GroupDkgTransactorSession) ComplaintPublicCommit(complainerIndex uint16, accusedIndex uint16, pubCommitG1 [2]*big.Int, pubCommitG2 [4]*big.Int, proofG1 [][32]byte, proofG2 [][32]byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintPublicCommit(&_GroupDkg.TransactOpts, complainerIndex, accusedIndex, pubCommitG1, pubCommitG2, proofG1, proofG2)
}

// ComplaintVk is a paid mutator transaction binding the contract method 0xf34b6f87.
//
// Solidity: function complaintVk(uint16 complainerIdx) returns()
func (_GroupDkg *GroupDkgTransactor) ComplaintVk(opts *bind.TransactOpts, complainerIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "complaintVk", complainerIdx)
}

// ComplaintVk is a paid mutator transaction binding the contract method 0xf34b6f87.
//
// Solidity: function complaintVk(uint16 complainerIdx) returns()
func (_GroupDkg *GroupDkgSession) ComplaintVk(complainerIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintVk(&_GroupDkg.TransactOpts, complainerIdx)
}

// ComplaintVk is a paid mutator transaction binding the contract method 0xf34b6f87.
//
// Solidity: function complaintVk(uint16 complainerIdx) returns()
func (_GroupDkg *GroupDkgTransactorSession) ComplaintVk(complainerIdx uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.ComplaintVk(&_GroupDkg.TransactOpts, complainerIdx)
}

// Init is a paid mutator transaction binding the contract method 0xfe728a02.
//
// Solidity: function init(uint16 threshold, uint16 numParticipants) returns()
func (_GroupDkg *GroupDkgTransactor) Init(opts *bind.TransactOpts, threshold uint16, numParticipants uint16) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "init", threshold, numParticipants)
}

// Init is a paid mutator transaction binding the contract method 0xfe728a02.
//
// Solidity: function init(uint16 threshold, uint16 numParticipants) returns()
func (_GroupDkg *GroupDkgSession) Init(threshold uint16, numParticipants uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.Init(&_GroupDkg.TransactOpts, threshold, numParticipants)
}

// Init is a paid mutator transaction binding the contract method 0xfe728a02.
//
// Solidity: function init(uint16 threshold, uint16 numParticipants) returns()
func (_GroupDkg *GroupDkgTransactorSession) Init(threshold uint16, numParticipants uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.Init(&_GroupDkg.TransactOpts, threshold, numParticipants)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_GroupDkg *GroupDkgTransactor) Join(opts *bind.TransactOpts, encPk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "join", encPk)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_GroupDkg *GroupDkgSession) Join(encPk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.Join(&_GroupDkg.TransactOpts, encPk)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_GroupDkg *GroupDkgTransactorSession) Join(encPk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.Join(&_GroupDkg.TransactOpts, encPk)
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_GroupDkg *GroupDkgTransactor) JoinTimedOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "joinTimedOut")
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_GroupDkg *GroupDkgSession) JoinTimedOut() (*types.Transaction, error) {
	return _GroupDkg.Contract.JoinTimedOut(&_GroupDkg.TransactOpts)
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_GroupDkg *GroupDkgTransactorSession) JoinTimedOut() (*types.Transaction, error) {
	return _GroupDkg.Contract.JoinTimedOut(&_GroupDkg.TransactOpts)
}

// OnConsensusFailure is a paid mutator transaction binding the contract method 0x6f04df41.
//
// Solidity: function onConsensusFailure(bytes payload) returns()
func (_GroupDkg *GroupDkgTransactor) OnConsensusFailure(opts *bind.TransactOpts, payload []byte) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "onConsensusFailure", payload)
}

// OnConsensusFailure is a paid mutator transaction binding the contract method 0x6f04df41.
//
// Solidity: function onConsensusFailure(bytes payload) returns()
func (_GroupDkg *GroupDkgSession) OnConsensusFailure(payload []byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.OnConsensusFailure(&_GroupDkg.TransactOpts, payload)
}

// OnConsensusFailure is a paid mutator transaction binding the contract method 0x6f04df41.
//
// Solidity: function onConsensusFailure(bytes payload) returns()
func (_GroupDkg *GroupDkgTransactorSession) OnConsensusFailure(payload []byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.OnConsensusFailure(&_GroupDkg.TransactOpts, payload)
}

// OnConsensusSuccess is a paid mutator transaction binding the contract method 0x7e2e5ddf.
//
// Solidity: function onConsensusSuccess(bytes payload) returns()
func (_GroupDkg *GroupDkgTransactor) OnConsensusSuccess(opts *bind.TransactOpts, payload []byte) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "onConsensusSuccess", payload)
}

// OnConsensusSuccess is a paid mutator transaction binding the contract method 0x7e2e5ddf.
//
// Solidity: function onConsensusSuccess(bytes payload) returns()
func (_GroupDkg *GroupDkgSession) OnConsensusSuccess(payload []byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.OnConsensusSuccess(&_GroupDkg.TransactOpts, payload)
}

// OnConsensusSuccess is a paid mutator transaction binding the contract method 0x7e2e5ddf.
//
// Solidity: function onConsensusSuccess(bytes payload) returns()
func (_GroupDkg *GroupDkgTransactorSession) OnConsensusSuccess(payload []byte) (*types.Transaction, error) {
	return _GroupDkg.Contract.OnConsensusSuccess(&_GroupDkg.TransactOpts, payload)
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x4a7f0569.
//
// Solidity: function postCommitTimedOut(uint16 senderIndex, uint256[2] vk) returns()
func (_GroupDkg *GroupDkgTransactor) PostCommitTimedOut(opts *bind.TransactOpts, senderIndex uint16, vk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "postCommitTimedOut", senderIndex, vk)
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x4a7f0569.
//
// Solidity: function postCommitTimedOut(uint16 senderIndex, uint256[2] vk) returns()
func (_GroupDkg *GroupDkgSession) PostCommitTimedOut(senderIndex uint16, vk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.PostCommitTimedOut(&_GroupDkg.TransactOpts, senderIndex, vk)
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x4a7f0569.
//
// Solidity: function postCommitTimedOut(uint16 senderIndex, uint256[2] vk) returns()
func (_GroupDkg *GroupDkgTransactorSession) PostCommitTimedOut(senderIndex uint16, vk [2]*big.Int) (*types.Transaction, error) {
	return _GroupDkg.Contract.PostCommitTimedOut(&_GroupDkg.TransactOpts, senderIndex, vk)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GroupDkg *GroupDkgTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GroupDkg *GroupDkgSession) RenounceOwnership() (*types.Transaction, error) {
	return _GroupDkg.Contract.RenounceOwnership(&_GroupDkg.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_GroupDkg *GroupDkgTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _GroupDkg.Contract.RenounceOwnership(&_GroupDkg.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GroupDkg *GroupDkgTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GroupDkg *GroupDkgSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GroupDkg.Contract.TransferOwnership(&_GroupDkg.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_GroupDkg *GroupDkgTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _GroupDkg.Contract.TransferOwnership(&_GroupDkg.TransactOpts, newOwner)
}

// Uint16ToBytes is a paid mutator transaction binding the contract method 0x13e62ed4.
//
// Solidity: function uint16ToBytes(uint16 x) returns(bytes b)
func (_GroupDkg *GroupDkgTransactor) Uint16ToBytes(opts *bind.TransactOpts, x uint16) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "uint16ToBytes", x)
}

// Uint16ToBytes is a paid mutator transaction binding the contract method 0x13e62ed4.
//
// Solidity: function uint16ToBytes(uint16 x) returns(bytes b)
func (_GroupDkg *GroupDkgSession) Uint16ToBytes(x uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.Uint16ToBytes(&_GroupDkg.TransactOpts, x)
}

// Uint16ToBytes is a paid mutator transaction binding the contract method 0x13e62ed4.
//
// Solidity: function uint16ToBytes(uint16 x) returns(bytes b)
func (_GroupDkg *GroupDkgTransactorSession) Uint16ToBytes(x uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.Uint16ToBytes(&_GroupDkg.TransactOpts, x)
}

// VerifySubmittedKeySubmitTimedOut is a paid mutator transaction binding the contract method 0x86e05f87.
//
// Solidity: function verifySubmittedKeySubmitTimedOut(uint16 senderIndex) returns()
func (_GroupDkg *GroupDkgTransactor) VerifySubmittedKeySubmitTimedOut(opts *bind.TransactOpts, senderIndex uint16) (*types.Transaction, error) {
	return _GroupDkg.contract.Transact(opts, "verifySubmittedKeySubmitTimedOut", senderIndex)
}

// VerifySubmittedKeySubmitTimedOut is a paid mutator transaction binding the contract method 0x86e05f87.
//
// Solidity: function verifySubmittedKeySubmitTimedOut(uint16 senderIndex) returns()
func (_GroupDkg *GroupDkgSession) VerifySubmittedKeySubmitTimedOut(senderIndex uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.VerifySubmittedKeySubmitTimedOut(&_GroupDkg.TransactOpts, senderIndex)
}

// VerifySubmittedKeySubmitTimedOut is a paid mutator transaction binding the contract method 0x86e05f87.
//
// Solidity: function verifySubmittedKeySubmitTimedOut(uint16 senderIndex) returns()
func (_GroupDkg *GroupDkgTransactorSession) VerifySubmittedKeySubmitTimedOut(senderIndex uint16) (*types.Transaction, error) {
	return _GroupDkg.Contract.VerifySubmittedKeySubmitTimedOut(&_GroupDkg.TransactOpts, senderIndex)
}

// GroupDkgDebugIterator is returned from FilterDebug and is used to iterate over the raw logs and unpacked data for Debug events raised by the GroupDkg contract.
type GroupDkgDebugIterator struct {
	Event *GroupDkgDebug // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgDebugIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgDebug)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgDebug)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgDebugIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgDebugIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgDebug represents a Debug event raised by the GroupDkg contract.
type GroupDkgDebug struct {
	Message string
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDebug is a free log retrieval operation binding the contract event 0x7cdb51e9dbbc205231228146c3246e7f914aa6d4a33170e43ecc8e3593481d1a.
//
// Solidity: event Debug(string message)
func (_GroupDkg *GroupDkgFilterer) FilterDebug(opts *bind.FilterOpts) (*GroupDkgDebugIterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return &GroupDkgDebugIterator{contract: _GroupDkg.contract, event: "Debug", logs: logs, sub: sub}, nil
}

// WatchDebug is a free log subscription operation binding the contract event 0x7cdb51e9dbbc205231228146c3246e7f914aa6d4a33170e43ecc8e3593481d1a.
//
// Solidity: event Debug(string message)
func (_GroupDkg *GroupDkgFilterer) WatchDebug(opts *bind.WatchOpts, sink chan<- *GroupDkgDebug) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "Debug")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgDebug)
				if err := _GroupDkg.contract.UnpackLog(event, "Debug", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebug is a log parse operation binding the contract event 0x7cdb51e9dbbc205231228146c3246e7f914aa6d4a33170e43ecc8e3593481d1a.
//
// Solidity: event Debug(string message)
func (_GroupDkg *GroupDkgFilterer) ParseDebug(log types.Log) (*GroupDkgDebug, error) {
	event := new(GroupDkgDebug)
	if err := _GroupDkg.contract.UnpackLog(event, "Debug", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgDebugProofG1Iterator is returned from FilterDebugProofG1 and is used to iterate over the raw logs and unpacked data for DebugProofG1 events raised by the GroupDkg contract.
type GroupDkgDebugProofG1Iterator struct {
	Event *GroupDkgDebugProofG1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgDebugProofG1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgDebugProofG1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgDebugProofG1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgDebugProofG1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgDebugProofG1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgDebugProofG1 represents a DebugProofG1 event raised by the GroupDkg contract.
type GroupDkgDebugProofG1 struct {
	Proof [][32]byte
	Root  [32]byte
	Leaf  [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDebugProofG1 is a free log retrieval operation binding the contract event 0x5f709aeb9dc886ca80635b8a581b23dd510de58f991e2bbe69dc162efef32e7f.
//
// Solidity: event DebugProofG1(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) FilterDebugProofG1(opts *bind.FilterOpts) (*GroupDkgDebugProofG1Iterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "DebugProofG1")
	if err != nil {
		return nil, err
	}
	return &GroupDkgDebugProofG1Iterator{contract: _GroupDkg.contract, event: "DebugProofG1", logs: logs, sub: sub}, nil
}

// WatchDebugProofG1 is a free log subscription operation binding the contract event 0x5f709aeb9dc886ca80635b8a581b23dd510de58f991e2bbe69dc162efef32e7f.
//
// Solidity: event DebugProofG1(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) WatchDebugProofG1(opts *bind.WatchOpts, sink chan<- *GroupDkgDebugProofG1) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "DebugProofG1")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgDebugProofG1)
				if err := _GroupDkg.contract.UnpackLog(event, "DebugProofG1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebugProofG1 is a log parse operation binding the contract event 0x5f709aeb9dc886ca80635b8a581b23dd510de58f991e2bbe69dc162efef32e7f.
//
// Solidity: event DebugProofG1(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) ParseDebugProofG1(log types.Log) (*GroupDkgDebugProofG1, error) {
	event := new(GroupDkgDebugProofG1)
	if err := _GroupDkg.contract.UnpackLog(event, "DebugProofG1", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgDebugProofG2Iterator is returned from FilterDebugProofG2 and is used to iterate over the raw logs and unpacked data for DebugProofG2 events raised by the GroupDkg contract.
type GroupDkgDebugProofG2Iterator struct {
	Event *GroupDkgDebugProofG2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgDebugProofG2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgDebugProofG2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgDebugProofG2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgDebugProofG2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgDebugProofG2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgDebugProofG2 represents a DebugProofG2 event raised by the GroupDkg contract.
type GroupDkgDebugProofG2 struct {
	Proof [][32]byte
	Root  [32]byte
	Leaf  [32]byte
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDebugProofG2 is a free log retrieval operation binding the contract event 0x318d363ded442e53a204d6dd6ba3d9b73e82c2d83d02e2fddf94a2c33db5ab6e.
//
// Solidity: event DebugProofG2(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) FilterDebugProofG2(opts *bind.FilterOpts) (*GroupDkgDebugProofG2Iterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "DebugProofG2")
	if err != nil {
		return nil, err
	}
	return &GroupDkgDebugProofG2Iterator{contract: _GroupDkg.contract, event: "DebugProofG2", logs: logs, sub: sub}, nil
}

// WatchDebugProofG2 is a free log subscription operation binding the contract event 0x318d363ded442e53a204d6dd6ba3d9b73e82c2d83d02e2fddf94a2c33db5ab6e.
//
// Solidity: event DebugProofG2(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) WatchDebugProofG2(opts *bind.WatchOpts, sink chan<- *GroupDkgDebugProofG2) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "DebugProofG2")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgDebugProofG2)
				if err := _GroupDkg.contract.UnpackLog(event, "DebugProofG2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDebugProofG2 is a log parse operation binding the contract event 0x318d363ded442e53a204d6dd6ba3d9b73e82c2d83d02e2fddf94a2c33db5ab6e.
//
// Solidity: event DebugProofG2(bytes32[] proof, bytes32 root, bytes32 leaf)
func (_GroupDkg *GroupDkgFilterer) ParseDebugProofG2(log types.Log) (*GroupDkgDebugProofG2, error) {
	event := new(GroupDkgDebugProofG2)
	if err := _GroupDkg.contract.UnpackLog(event, "DebugProofG2", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgNewCommitIterator is returned from FilterNewCommit and is used to iterate over the raw logs and unpacked data for NewCommit events raised by the GroupDkg contract.
type GroupDkgNewCommitIterator struct {
	Event *GroupDkgNewCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgNewCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgNewCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgNewCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgNewCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgNewCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgNewCommit represents a NewCommit event raised by the GroupDkg contract.
type GroupDkgNewCommit struct {
	CommitterIndex  uint16
	RootPubCommitG1 [32]byte
	RootPubCommitG2 [32]byte
	RootPrvCommit   [32]byte
	YG1             [2]*big.Int
	CommitIpfsHash  string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNewCommit is a free log retrieval operation binding the contract event 0x2e9f66bd1231f3916ccbdbfb9638f51d9e0f38e25b7bf8f354a57c75fa21babc.
//
// Solidity: event NewCommit(uint16 committerIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, uint256[2] yG1, string commitIpfsHash)
func (_GroupDkg *GroupDkgFilterer) FilterNewCommit(opts *bind.FilterOpts) (*GroupDkgNewCommitIterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "NewCommit")
	if err != nil {
		return nil, err
	}
	return &GroupDkgNewCommitIterator{contract: _GroupDkg.contract, event: "NewCommit", logs: logs, sub: sub}, nil
}

// WatchNewCommit is a free log subscription operation binding the contract event 0x2e9f66bd1231f3916ccbdbfb9638f51d9e0f38e25b7bf8f354a57c75fa21babc.
//
// Solidity: event NewCommit(uint16 committerIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, uint256[2] yG1, string commitIpfsHash)
func (_GroupDkg *GroupDkgFilterer) WatchNewCommit(opts *bind.WatchOpts, sink chan<- *GroupDkgNewCommit) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "NewCommit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgNewCommit)
				if err := _GroupDkg.contract.UnpackLog(event, "NewCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewCommit is a log parse operation binding the contract event 0x2e9f66bd1231f3916ccbdbfb9638f51d9e0f38e25b7bf8f354a57c75fa21babc.
//
// Solidity: event NewCommit(uint16 committerIndex, bytes32 rootPubCommitG1, bytes32 rootPubCommitG2, bytes32 rootPrvCommit, uint256[2] yG1, string commitIpfsHash)
func (_GroupDkg *GroupDkgFilterer) ParseNewCommit(log types.Log) (*GroupDkgNewCommit, error) {
	event := new(GroupDkgNewCommit)
	if err := _GroupDkg.contract.UnpackLog(event, "NewCommit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgNewComplaintIterator is returned from FilterNewComplaint and is used to iterate over the raw logs and unpacked data for NewComplaint events raised by the GroupDkg contract.
type GroupDkgNewComplaintIterator struct {
	Event *GroupDkgNewComplaint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgNewComplaintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgNewComplaint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgNewComplaint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgNewComplaintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgNewComplaintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgNewComplaint represents a NewComplaint event raised by the GroupDkg contract.
type GroupDkgNewComplaint struct {
	Consensus common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewComplaint is a free log retrieval operation binding the contract event 0xcf30e67539832b20f8336652c666a6ac41c1037990e0b55b655d0ee9e1ac2eaa.
//
// Solidity: event NewComplaint(address consensus)
func (_GroupDkg *GroupDkgFilterer) FilterNewComplaint(opts *bind.FilterOpts) (*GroupDkgNewComplaintIterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "NewComplaint")
	if err != nil {
		return nil, err
	}
	return &GroupDkgNewComplaintIterator{contract: _GroupDkg.contract, event: "NewComplaint", logs: logs, sub: sub}, nil
}

// WatchNewComplaint is a free log subscription operation binding the contract event 0xcf30e67539832b20f8336652c666a6ac41c1037990e0b55b655d0ee9e1ac2eaa.
//
// Solidity: event NewComplaint(address consensus)
func (_GroupDkg *GroupDkgFilterer) WatchNewComplaint(opts *bind.WatchOpts, sink chan<- *GroupDkgNewComplaint) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "NewComplaint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgNewComplaint)
				if err := _GroupDkg.contract.UnpackLog(event, "NewComplaint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewComplaint is a log parse operation binding the contract event 0xcf30e67539832b20f8336652c666a6ac41c1037990e0b55b655d0ee9e1ac2eaa.
//
// Solidity: event NewComplaint(address consensus)
func (_GroupDkg *GroupDkgFilterer) ParseNewComplaint(log types.Log) (*GroupDkgNewComplaint, error) {
	event := new(GroupDkgNewComplaint)
	if err := _GroupDkg.contract.UnpackLog(event, "NewComplaint", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the GroupDkg contract.
type GroupDkgOwnershipTransferredIterator struct {
	Event *GroupDkgOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgOwnershipTransferred represents a OwnershipTransferred event raised by the GroupDkg contract.
type GroupDkgOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GroupDkg *GroupDkgFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*GroupDkgOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &GroupDkgOwnershipTransferredIterator{contract: _GroupDkg.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GroupDkg *GroupDkgFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *GroupDkgOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgOwnershipTransferred)
				if err := _GroupDkg.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_GroupDkg *GroupDkgFilterer) ParseOwnershipTransferred(log types.Log) (*GroupDkgOwnershipTransferred, error) {
	event := new(GroupDkgOwnershipTransferred)
	if err := _GroupDkg.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgParticipantJoinedIterator is returned from FilterParticipantJoined and is used to iterate over the raw logs and unpacked data for ParticipantJoined events raised by the GroupDkg contract.
type GroupDkgParticipantJoinedIterator struct {
	Event *GroupDkgParticipantJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgParticipantJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgParticipantJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgParticipantJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgParticipantJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgParticipantJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgParticipantJoined represents a ParticipantJoined event raised by the GroupDkg contract.
type GroupDkgParticipantJoined struct {
	Index uint16
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterParticipantJoined is a free log retrieval operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_GroupDkg *GroupDkgFilterer) FilterParticipantJoined(opts *bind.FilterOpts) (*GroupDkgParticipantJoinedIterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return &GroupDkgParticipantJoinedIterator{contract: _GroupDkg.contract, event: "ParticipantJoined", logs: logs, sub: sub}, nil
}

// WatchParticipantJoined is a free log subscription operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_GroupDkg *GroupDkgFilterer) WatchParticipantJoined(opts *bind.WatchOpts, sink chan<- *GroupDkgParticipantJoined) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgParticipantJoined)
				if err := _GroupDkg.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParticipantJoined is a log parse operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_GroupDkg *GroupDkgFilterer) ParseParticipantJoined(log types.Log) (*GroupDkgParticipantJoined, error) {
	event := new(GroupDkgParticipantJoined)
	if err := _GroupDkg.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// GroupDkgPhaseChangeIterator is returned from FilterPhaseChange and is used to iterate over the raw logs and unpacked data for PhaseChange events raised by the GroupDkg contract.
type GroupDkgPhaseChangeIterator struct {
	Event *GroupDkgPhaseChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *GroupDkgPhaseChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(GroupDkgPhaseChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(GroupDkgPhaseChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *GroupDkgPhaseChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *GroupDkgPhaseChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// GroupDkgPhaseChange represents a PhaseChange event raised by the GroupDkg contract.
type GroupDkgPhaseChange struct {
	Phase uint8
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPhaseChange is a free log retrieval operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_GroupDkg *GroupDkgFilterer) FilterPhaseChange(opts *bind.FilterOpts) (*GroupDkgPhaseChangeIterator, error) {

	logs, sub, err := _GroupDkg.contract.FilterLogs(opts, "PhaseChange")
	if err != nil {
		return nil, err
	}
	return &GroupDkgPhaseChangeIterator{contract: _GroupDkg.contract, event: "PhaseChange", logs: logs, sub: sub}, nil
}

// WatchPhaseChange is a free log subscription operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_GroupDkg *GroupDkgFilterer) WatchPhaseChange(opts *bind.WatchOpts, sink chan<- *GroupDkgPhaseChange) (event.Subscription, error) {

	logs, sub, err := _GroupDkg.contract.WatchLogs(opts, "PhaseChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(GroupDkgPhaseChange)
				if err := _GroupDkg.contract.UnpackLog(event, "PhaseChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePhaseChange is a log parse operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_GroupDkg *GroupDkgFilterer) ParsePhaseChange(log types.Log) (*GroupDkgPhaseChange, error) {
	event := new(GroupDkgPhaseChange)
	if err := _GroupDkg.contract.UnpackLog(event, "PhaseChange", log); err != nil {
		return nil, err
	}
	return event, nil
}
