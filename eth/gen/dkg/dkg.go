// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package dkg

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DkgABI is the input ABI used to generate the binding from.
const DkgABI = "[{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"threshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"numParticipants\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"committerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pubCommitG1\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"pubCommitG2\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prvCommit\",\"type\":\"uint256[]\"}],\"name\":\"NewCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"name\":\"ParticipantJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enumdkg.Phase\",\"name\":\"phase\",\"type\":\"uint8\"}],\"name\":\"PhaseChange\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"commitTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curN\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curNumCommittedLeft\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curPhase\",\"outputs\":[{\"internalType\":\"enumdkg.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"g1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"g2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"joinTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"ethPk\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"phaseStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"postCommitTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"t\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"encPk\",\"type\":\"uint256[2]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"senderIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"pubCommitG1\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"pubCommitG2\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"encPrCommit\",\"type\":\"uint256[]\"}],\"name\":\"commit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"postCommitTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"joinTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"commitTimedOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGroupPK\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"groupPK\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubCommitIndex\",\"type\":\"uint16\"}],\"name\":\"complaintPublicCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"complainerSk\",\"type\":\"uint256\"}],\"name\":\"complaintPrivateCommit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"coefIndex\",\"type\":\"uint16\"}],\"name\":\"complaintNotInG1\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"complainerIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"accusedIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"coefIndex\",\"type\":\"uint16\"}],\"name\":\"complaintNotInG2\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantPkEnc\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"encPk\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"coefIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantPubCommitG1\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"publicCommitmentsG1\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"coefIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantPubCommitG2\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"publicCommitmentsG2\",\"type\":\"uint256[4]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"committedToIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantPrvCommit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"encPrivateCommitments\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"participantIndex\",\"type\":\"uint16\"}],\"name\":\"getParticipantIsCommitted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// DkgBin is the compiled bytecode used for deploying new contracts.
var DkgBin = "0x60c060405260016080818152600260a08190526200001f92919062000208565b5060405180608001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa8152506003906004620000d392919062000250565b50348015620000e157600080fd5b5060405162002a5438038062002a54833981810160405260608110156200010757600080fd5b50805160208201516040909201516008805461ffff191661ffff8085169190911763ffff00001916620100009186169182021761ffff60301b1916660100000000000091909102179055600781905560008054929392819060ff1916600182021790555060085461ffff80821662010000909204161180156200018f575060085461ffff1615155b620001fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f77726f6e6720696e707574000000000000000000000000000000000000000000604482015290519081900360640190fd5b50504360095550620002a1565b82600281019282156200023e579160200282015b828111156200023e578251829060ff169055916020019190600101906200021c565b506200024c92915062000281565b5090565b82600481019282156200023e579160200282015b828111156200023e57825182559160200191906001019062000264565b6200029e91905b808211156200024c576000815560010162000288565b90565b6127a380620002b16000396000f3fe6080604052600436106101b75760003560e01c80636baa03f0116100ec578063b60095a51161008a578063ed507e4111610064578063ed507e41146106ce578063edd864841461070e578063f75fbced1461074e578063fb2990ad14610763576101b7565b8063b60095a514610643578063d7101dd614610658578063dbb3d86e1461068e576101b7565b806391252c90116100c657806391252c90146105d657806392d0d153146105eb578063a78a9dad14610600578063ab5a315914610615576101b7565b80636baa03f014610532578063786e2c24146105835780637b74cc3c14610598576101b7565b8063341fb9cd1161015957806349abee501161013357806349abee501461047b5780635072fd111461049057806360fed2f6146104d2578063696ded60146104e7576101b7565b8063341fb9cd146103fc578063382421bc1461043557806346d6d51b1461045f576101b7565b80631d35b9e2116101955780631d35b9e214610320578063240df6de1461034a578063247ddbdf146103bb5780632e52d606146103d0576101b7565b806304bab886146101bc5780630777ca18146101e357806315488b881461030b575b600080fd5b3480156101c857600080fd5b506101d1610778565b60408051918252519081900360200190f35b3480156101ef57600080fd5b506103096004803603608081101561020657600080fd5b61ffff8235169190810190604081016020820135600160201b81111561022b57600080fd5b82018360208201111561023d57600080fd5b803590602001918460208302840111600160201b8311171561025e57600080fd5b919390929091602081019035600160201b81111561027b57600080fd5b82018360208201111561028d57600080fd5b803590602001918460208302840111600160201b831117156102ae57600080fd5b919390929091602081019035600160201b8111156102cb57600080fd5b8201836020820111156102dd57600080fd5b803590602001918460208302840111600160201b831117156102fe57600080fd5b50909250905061077d565b005b34801561031757600080fd5b506101d1610975565b34801561032c57600080fd5b506101d16004803603602081101561034357600080fd5b503561097b565b34801561035657600080fd5b506103806004803603604081101561036d57600080fd5b5061ffff8135811691602001351661098f565b6040518082600260200280838360005b838110156103a8578181015183820152602001610390565b5050505090500191505060405180910390f35b3480156103c757600080fd5b506101d16109ed565b3480156103dc57600080fd5b506103e56109f2565b6040805161ffff9092168252519081900360200190f35b34801561040857600080fd5b50610411610a02565b6040518082600481111561042157fe5b60ff16815260200191505060405180910390f35b34801561044157600080fd5b506101d16004803603602081101561045857600080fd5b5035610a0b565b6103e56004803603604081101561047557600080fd5b50610a18565b34801561048757600080fd5b506101d1610ca0565b34801561049c57600080fd5b506104be600480360360208110156104b357600080fd5b503561ffff16610ca6565b604080519115158252519081900360200190f35b3480156104de57600080fd5b50610309610cc2565b3480156104f357600080fd5b5061051d6004803603604081101561050a57600080fd5b5061ffff81358116916020013516610db6565b60405181518152808260808083836020610390565b34801561053e57600080fd5b506105606004803603602081101561055557600080fd5b503561ffff16610e13565b604080516001600160a01b03909316835290151560208301528051918290030190f35b34801561058f57600080fd5b506103e5610e3b565b3480156105a457600080fd5b50610309600480360360608110156105bb57600080fd5b5061ffff813581169160208101359091169060400135610e4c565b3480156105e257600080fd5b506103e56111c0565b3480156105f757600080fd5b506103e56111d1565b34801561060c57600080fd5b506103096111db565b34801561062157600080fd5b506103806004803603602081101561063857600080fd5b503561ffff166112b2565b34801561064f57600080fd5b506101d1611305565b34801561066457600080fd5b506101d16004803603604081101561067b57600080fd5b5061ffff8135811691602001351661130a565b34801561069a57600080fd5b50610309600480360360608110156106b157600080fd5b5061ffff8135811691602081013582169160409091013516611334565b3480156106da57600080fd5b50610309600480360360608110156106f157600080fd5b5061ffff81358116916020810135821691604090910135166115da565b34801561071a57600080fd5b506103096004803603606081101561073157600080fd5b5061ffff81358116916020810135821691604090910135166117f3565b34801561075a57600080fd5b506103806119a3565b34801561076f57600080fd5b50610309611b99565b600581565b60018060005460ff16600481111561079157fe5b146107d1576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff88166000908152600a602052604090205488906001600160a01b0316331461083b576040805162461bcd60e51b81526020600482015260156024820152743737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b61ffff89166000908152600a602052604090206006015460ff16801561086057600080fd5b6108ff8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611c7d92505050565b6008805467ffff000000000000198116600160301b9182900461ffff9081166000190190811692830291909117909255610968576000805460ff1916600290811790915543600955604080519182525160008051602061274f8339815191529181900360200190a15b5050505050505050505050565b60075481565b6001816002811061098857fe5b0154905081565b61099761265a565b61ffff8381166000908152600a602090815260408083209386168352600390930190528190208151808301928390529160029082845b8154815260200190600101908083116109cd575050505050905092915050565b600c81565b60085462010000900461ffff1681565b60005460ff1681565b6003816004811061098857fe5b60006007543414610a60576040805162461bcd60e51b815260206004820152600d60248201526c1ddc9bdb99c819195c1bdcda5d609a1b604482015290519081900360640190fd5b60008060005460ff166004811115610a7457fe5b14610ab4576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b600854600160201b900461ffff163360015b8261ffff168161ffff1611610b425761ffff81166000908152600a60205260409020546001600160a01b0383811691161415610b3a576040805162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a9bda5b995960921b604482015290519081900360640190fd5b600101610ac6565b50604080516060810182526001600160a01b03831681528151808301835260019094019390916020830191908890600290839083908082843760009201829052509284525050602091820181905261ffff85168152600a825260409020825181546001600160a01b0319166001600160a01b0390911617815590820151610bcf9060018301906002612678565b50604091909101516006909101805460ff19169115159190911790556008805465ffff000000001916600160201b61ffff85169081029190911790915560011415610c1957436009555b60085461ffff83811662010000909204161415610c61576000805460ff19166001908117909155604080519182525160008051602061274f8339815191529181900360200190a15b6040805161ffff8416815290517fc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a70939181900360200190a1509392505050565b60095481565b61ffff166000908152600a602052604090206006015460ff1690565b60028060005460ff166004811115610cd657fe5b14610d16576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b60095443906005018111610d6e576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6000805460ff1916600390811790915560405160008051602061274f833981519152919080825b60ff16815260200191505060405180910390a1610db26000612015565b5050565b610dbe6126b6565b61ffff8381166000908152600a602090815260408083209386168352600493840182529182902082516080810193849052815481529390929091600184019085018083116109cd575050505050905092915050565b600a60205260009081526040902080546006909101546001600160a01b039091169060ff1682565b600854600160301b900461ffff1681565b61ffff83166000908152600a602052604090205483906001600160a01b03163314610eb6576040805162461bcd60e51b81526020600482015260156024820152743737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b60048060005460ff166004811115610eca57fe5b1415610f0b576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b60038060005460ff166004811115610f1f57fe5b1415610f60576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6000805460ff19166004908117909155604080519182525160008051602061274f8339815191529181900360200190a161ffff85166000908152600a60205260409020600681015460ff16610fbe57610fb887612015565b506111b8565b61ffff87166000908152600a602052604090819020905163776710d760e01b815273__ecOps_________________________________9163a688890691600191820191849163776710d791908b90600481019060440183825b81548152602001906001019080831161101757505082815260200192505050604080518083038186803b15801561104d57600080fd5b505af4158015611061573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561108657600080fd5b5060405160e084901b6001600160e01b0319168152600481019060440183825b8154815260200190600101908083116110a65750839050604080838360005b838110156110dd5781810151838201526020016110c5565b505050509050019250505060206040518083038186803b15801561110057600080fd5b505af4158015611114573d6000803e3d6000fd5b505050506040513d602081101561112a57600080fd5b505161113957610fb887612015565b604080518082019182905260009161118c9190600185019060029082845b815481526020019060010190808311611157575050505061ffff8b1660009081526005860160205260409020548991506120cf565b90506111998882846121e0565b156111ac576111a788612015565b6111b5565b6111b587612015565b50505b505050505050565b600854600160201b900461ffff1681565b60085461ffff1681565b60008060005460ff1660048111156111ef57fe5b1461122f576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6009544390600c018111611287576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6000805460ff1916600490811790915560405160008051602061274f83398151915291908082610d95565b6112ba61265a565b61ffff82166000908152600a602052604090819020815180830190925260010160028282826020028201915b8154815260200190600101908083116112e65750505050509050919050565b600b81565b61ffff9182166000908152600a602090815260408083209390941682526005909201909152205490565b61ffff83166000908152600a602052604090205483906001600160a01b0316331461139e576040805162461bcd60e51b81526020600482015260156024820152743737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b60048060005460ff1660048111156113b257fe5b14156113f3576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b60038060005460ff16600481111561140757fe5b1415611448576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6000805460ff19166004908117909155604080519182525160008051602061274f8339815191529181900360200190a161ffff85166000908152600a60205260409020600681015460ff166114a057610fb887612015565b61ffff8516600090815260038281016020908152604080842060048087019093529381902090516349ac97d160e01b815273__ecOps_________________________________946349ac97d19490939092600192909181019060440185825b8154815260200190600101908083116114ff575050608081019085905b81548152602001906001019080831161151c575050604081019084905b815481526020019060010190808311611539575050608081019083905b81548152602001906001019080831161155657505094505050505060206040518083038186803b15801561158957600080fd5b505af415801561159d573d6000803e3d6000fd5b505050506040513d60208110156115b357600080fd5b5051156115c8576115c387612015565b6115d1565b6115d186612015565b50505050505050565b61ffff83166000908152600a602052604090205483906001600160a01b03163314611644576040805162461bcd60e51b81526020600482015260156024820152743737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b60048060005460ff16600481111561165857fe5b1415611699576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b60038060005460ff1660048111156116ad57fe5b14156116ee576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff85166000908152600a60205260409020600681015460ff16156115d15761ffff851660009081526004828101602052604091829020915163d8522ba560e01b815273__ecOps_________________________________9263d8522ba59290919081019060840182825b81548152602001906001019080831161175a57505091505060206040518083038186803b15801561178a57600080fd5b505af415801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b50516115d1576000805460ff19166004908117909155604080519182525160008051602061274f8339815191529181900360200190a16115d186612015565b61ffff83166000908152600a602052604090205483906001600160a01b0316331461185d576040805162461bcd60e51b81526020600482015260156024820152743737ba1030baba3437b934bd32b21039b2b73232b960591b604482015290519081900360640190fd5b60048060005460ff16600481111561187157fe5b14156118b2576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b60038060005460ff1660048111156118c657fe5b1415611907576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b61ffff85166000908152600a60205260409020600681015460ff16156115d15761ffff8516600090815260038201602052604090819020905163a03980bb60e01b815273__ecOps_________________________________9163a03980bb916004018082600260200282019181548152602001906001019080831161175a57505091505060206040518083038186803b15801561178a57600080fd5b6119ab61265a565b60038060005460ff1660048111156119bf57fe5b146119ff576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b600854600080527fbbc70db1b6c7afd11e79c0fb0051300458f1a3acb8ee9789d9b6b26c61ad9bca60205260408051808201918290526201000090920461ffff1691907fdcbe5825655c354d1f6aaa346e4a79f35e9f86b5850d5d196cf5b699e8d0cbc59060029082845b815481526020019060010190808311611a6a5750939650600293505050505b8161ffff168161ffff1611611b935761ffff81166000908152600a60209081526040808320838052600301909152808220815163e9d1c41f60e01b815273__ecOps_________________________________9363e9d1c41f9389939260040191829185918190849084905b83811015611b0c578181015183820152602001611af4565b5050509201915083905060026020028201915b815481526020019060010190808311611b1f57505092505050604080518083038186803b158015611b4f57600080fd5b505af4158015611b63573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015611b8857600080fd5b509350600101611a89565b50505090565b60018060005460ff166004811115611bad57fe5b14611bed576040805162461bcd60e51b815260206004820152600b60248201526a77726f6e6720706861736560a81b604482015290519081900360640190fd5b6009544390600b018111611c45576040805162461bcd60e51b815260206004820152601a6024820152791a185cdb89dd081c995858da1959081d1a5b595bdd5d081e595d60321b604482015290519081900360640190fd5b6000805460ff19166004908117909155604080519182525160008051602061274f8339815191529181900360200190a1610db2612554565b600854835161ffff620100008304811692811691600283810201909116148015611cb157508060040260040161ffff168451145b8015611cc157508161ffff168351145b611d07576040805162461bcd60e51b81526020600482015260126024820152711a5b9c1d5d081cda5e99481a5b9d985b1a5960721b604482015290519081900360640190fd5b60005b8160010161ffff168161ffff161015611e6b576040518060400160405280878360020261ffff1681518110611d3b57fe5b60200260200101518152602001878360020260010161ffff1681518110611d5e57fe5b60209081029190910181015190915261ffff808a166000908152600a83526040808220928616825260039092019092529020611d9b916002612678565b506040518060800160405280868360040261ffff1681518110611dba57fe5b60200260200101518152602001868360040260010161ffff1681518110611ddd57fe5b60200260200101518152602001868360040260020161ffff1681518110611e0057fe5b60200260200101518152602001868360040260030161ffff1681518110611e2357fe5b60209081029190910181015190915261ffff808a166000908152600a835260408082209286168252600492830190935291909120611e629290916126d4565b50600101611d0a565b5060015b8261ffff168161ffff1611611eda578061ffff168761ffff1614611ed257836001820361ffff1681518110611ea057fe5b60209081029190910181015161ffff808a166000908152600a8452604080822092861682526005909201909352909120555b600101611e6f565b61ffff87166000818152600a60209081526040808320600601805460ff19166001179055805193845260808483018181528b51918601919091528a517fa7932912e4a802d9e8f3a56a22297f2a341d526e66717cf78a208af10bcb2d59958d958d958d958d95939490850192606086019260a08701928a8201929102908190849084905b83811015611f76578181015183820152602001611f5e565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611fb5578181015183820152602001611f9d565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015611ff4578181015183820152602001611fdc565b5050505090500197505050505050505060405180910390a150505050505050565b60085461ffff600160201b90910481169060009083166120455761ffff821630318161203d57fe5b04905061205b565b61ffff60001983011630318161205757fe5b0490505b60015b8260010161ffff168161ffff1610156120c9578361ffff168161ffff16146120c15761ffff81166000908152600a60205260408082205490516001600160a01b039091169184156108fc02918591818181858888f193505050506120c157600080fd5b60010161205e565b50505050565b60008073__ecOps_________________________________63776710d786866040518363ffffffff1660e01b81526004018083600260200280838360005b8381101561212557818101518382015260200161210d565b5050505090500182815260200192505050604080518083038186803b15801561214d57600080fd5b505af4158015612161573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561218657600080fd5b5060408051602001908190839080838360005b838110156121b1578181015183820152602001612199565b505050509050019150506040516020818303038152906040528051906020012090508083189150509392505050565b60006121ea61265a565b6121f261265a565b6121fa61265a565b60405163776710d760e01b815273__ecOps_________________________________9063776710d7906001908990600481019060440183825b81548152602001906001019080831161223357505082815260200192505050604080518083038186803b15801561226957600080fd5b505af415801561227d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156122a257600080fd5b50905060005b60085461ffff9081166001018116908216101561247b5761ffff818116600081815260038901602052604090819020905163776710d760e01b815273__ecOps_________________________________9363776710d793908d160a90600481019060440183825b81548152602001906001019080831161230f5750508261ffff16815260200192505050604080518083038186803b15801561234957600080fd5b505af415801561235d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561238257600080fd5b50935061ffff811661239657839250612473565b73__ecOps_________________________________63e9d1c41f84866040518363ffffffff1660e01b81526004018083600260200280838360005b838110156123e95781810151838201526020016123d1565b5050505090500182600260200280838360005b838110156124145781810151838201526020016123fc565b5050505090500192505050604080518083038186803b15801561243657600080fd5b505af415801561244a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561246f57600080fd5b5092505b6001016122a8565b5073__ecOps_________________________________63a688890682846040518363ffffffff1660e01b81526004018083600260200280838360005b838110156124cf5781810151838201526020016124b7565b5050505090500182600260200280838360005b838110156124fa5781810151838201526020016124e2565b505050509050019250505060206040518083038186803b15801561251d57600080fd5b505af4158015612531573d6000803e3d6000fd5b505050506040513d602081101561254757600080fd5b5051979650505050505050565b60085461ffff600160201b8204811691600160301b90048116820390600090821630318161257e57fe5b04905060015b8360010161ffff168161ffff1610156120c95761259f612701565b61ffff82166000908152600a6020908152604091829020825160608101845281546001600160a01b0316815283518085019485905290939192840191600184019060029082845b8154815260200190600101908083116125e65750505091835250506006919091015460ff1615156020909101526040810151909150156126515780516040516001600160a01b039091169084156108fc029085906000818181858888f1935050505061265157600080fd5b50600101612584565b60405180604001604052806002906020820280388339509192915050565b82600281019282156126a6579160200282015b828111156126a657825182559160200191906001019061268b565b506126b2929150612731565b5090565b60405180608001604052806004906020820280388339509192915050565b82600481019282156126a657916020028201828111156126a657825182559160200191906001019061268b565b604051806060016040528060006001600160a01b0316815260200161272461265a565b8152600060209091015290565b61274b91905b808211156126b25760008155600101612737565b9056feed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8fa265627a7a72315820e7ab9601972677fad1ccef33554aaed15c2dd3bc2e74340827a0696996f176f564736f6c634300050c0032"

// DeployDkg deploys a new Ethereum contract, binding an instance of Dkg to it.
func DeployDkg(auth *bind.TransactOpts, backend bind.ContractBackend, threshold uint16, numParticipants uint16, deposit *big.Int) (common.Address, *types.Transaction, *Dkg, error) {
	parsed, err := abi.JSON(strings.NewReader(DkgABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(DkgBin), backend, threshold, numParticipants, deposit)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Dkg{DkgCaller: DkgCaller{contract: contract}, DkgTransactor: DkgTransactor{contract: contract}, DkgFilterer: DkgFilterer{contract: contract}}, nil
}

// Dkg is an auto generated Go binding around an Ethereum contract.
type Dkg struct {
	DkgCaller     // Read-only binding to the contract
	DkgTransactor // Write-only binding to the contract
	DkgFilterer   // Log filterer for contract events
}

// DkgCaller is an auto generated read-only Go binding around an Ethereum contract.
type DkgCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DkgTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DkgTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DkgFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DkgFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DkgSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DkgSession struct {
	Contract     *Dkg              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DkgCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DkgCallerSession struct {
	Contract *DkgCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// DkgTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DkgTransactorSession struct {
	Contract     *DkgTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DkgRaw is an auto generated low-level Go binding around an Ethereum contract.
type DkgRaw struct {
	Contract *Dkg // Generic contract binding to access the raw methods on
}

// DkgCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DkgCallerRaw struct {
	Contract *DkgCaller // Generic read-only contract binding to access the raw methods on
}

// DkgTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DkgTransactorRaw struct {
	Contract *DkgTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDkg creates a new instance of Dkg, bound to a specific deployed contract.
func NewDkg(address common.Address, backend bind.ContractBackend) (*Dkg, error) {
	contract, err := bindDkg(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Dkg{DkgCaller: DkgCaller{contract: contract}, DkgTransactor: DkgTransactor{contract: contract}, DkgFilterer: DkgFilterer{contract: contract}}, nil
}

// NewDkgCaller creates a new read-only instance of Dkg, bound to a specific deployed contract.
func NewDkgCaller(address common.Address, caller bind.ContractCaller) (*DkgCaller, error) {
	contract, err := bindDkg(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DkgCaller{contract: contract}, nil
}

// NewDkgTransactor creates a new write-only instance of Dkg, bound to a specific deployed contract.
func NewDkgTransactor(address common.Address, transactor bind.ContractTransactor) (*DkgTransactor, error) {
	contract, err := bindDkg(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DkgTransactor{contract: contract}, nil
}

// NewDkgFilterer creates a new log filterer instance of Dkg, bound to a specific deployed contract.
func NewDkgFilterer(address common.Address, filterer bind.ContractFilterer) (*DkgFilterer, error) {
	contract, err := bindDkg(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DkgFilterer{contract: contract}, nil
}

// bindDkg binds a generic wrapper to an already deployed contract.
func bindDkg(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DkgABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dkg *DkgRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Dkg.Contract.DkgCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dkg *DkgRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dkg.Contract.DkgTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dkg *DkgRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dkg.Contract.DkgTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dkg *DkgCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Dkg.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dkg *DkgTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dkg.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dkg *DkgTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dkg.Contract.contract.Transact(opts, method, params...)
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_Dkg *DkgCaller) CommitTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "commitTimeout")
	return *ret0, err
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_Dkg *DkgSession) CommitTimeout() (*big.Int, error) {
	return _Dkg.Contract.CommitTimeout(&_Dkg.CallOpts)
}

// CommitTimeout is a free data retrieval call binding the contract method 0xb60095a5.
//
// Solidity: function commitTimeout() constant returns(uint256)
func (_Dkg *DkgCallerSession) CommitTimeout() (*big.Int, error) {
	return _Dkg.Contract.CommitTimeout(&_Dkg.CallOpts)
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_Dkg *DkgCaller) CurN(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "curN")
	return *ret0, err
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_Dkg *DkgSession) CurN() (uint16, error) {
	return _Dkg.Contract.CurN(&_Dkg.CallOpts)
}

// CurN is a free data retrieval call binding the contract method 0x91252c90.
//
// Solidity: function curN() constant returns(uint16)
func (_Dkg *DkgCallerSession) CurN() (uint16, error) {
	return _Dkg.Contract.CurN(&_Dkg.CallOpts)
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_Dkg *DkgCaller) CurNumCommittedLeft(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "curNumCommittedLeft")
	return *ret0, err
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_Dkg *DkgSession) CurNumCommittedLeft() (uint16, error) {
	return _Dkg.Contract.CurNumCommittedLeft(&_Dkg.CallOpts)
}

// CurNumCommittedLeft is a free data retrieval call binding the contract method 0x786e2c24.
//
// Solidity: function curNumCommittedLeft() constant returns(uint16)
func (_Dkg *DkgCallerSession) CurNumCommittedLeft() (uint16, error) {
	return _Dkg.Contract.CurNumCommittedLeft(&_Dkg.CallOpts)
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_Dkg *DkgCaller) CurPhase(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "curPhase")
	return *ret0, err
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_Dkg *DkgSession) CurPhase() (uint8, error) {
	return _Dkg.Contract.CurPhase(&_Dkg.CallOpts)
}

// CurPhase is a free data retrieval call binding the contract method 0x341fb9cd.
//
// Solidity: function curPhase() constant returns(uint8)
func (_Dkg *DkgCallerSession) CurPhase() (uint8, error) {
	return _Dkg.Contract.CurPhase(&_Dkg.CallOpts)
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_Dkg *DkgCaller) DepositWei(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "depositWei")
	return *ret0, err
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_Dkg *DkgSession) DepositWei() (*big.Int, error) {
	return _Dkg.Contract.DepositWei(&_Dkg.CallOpts)
}

// DepositWei is a free data retrieval call binding the contract method 0x15488b88.
//
// Solidity: function depositWei() constant returns(uint256)
func (_Dkg *DkgCallerSession) DepositWei() (*big.Int, error) {
	return _Dkg.Contract.DepositWei(&_Dkg.CallOpts)
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_Dkg *DkgCaller) G1(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "g1", arg0)
	return *ret0, err
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_Dkg *DkgSession) G1(arg0 *big.Int) (*big.Int, error) {
	return _Dkg.Contract.G1(&_Dkg.CallOpts, arg0)
}

// G1 is a free data retrieval call binding the contract method 0x1d35b9e2.
//
// Solidity: function g1(uint256 ) constant returns(uint256)
func (_Dkg *DkgCallerSession) G1(arg0 *big.Int) (*big.Int, error) {
	return _Dkg.Contract.G1(&_Dkg.CallOpts, arg0)
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_Dkg *DkgCaller) G2(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "g2", arg0)
	return *ret0, err
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_Dkg *DkgSession) G2(arg0 *big.Int) (*big.Int, error) {
	return _Dkg.Contract.G2(&_Dkg.CallOpts, arg0)
}

// G2 is a free data retrieval call binding the contract method 0x382421bc.
//
// Solidity: function g2(uint256 ) constant returns(uint256)
func (_Dkg *DkgCallerSession) G2(arg0 *big.Int) (*big.Int, error) {
	return _Dkg.Contract.G2(&_Dkg.CallOpts, arg0)
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[2] groupPK)
func (_Dkg *DkgCaller) GetGroupPK(opts *bind.CallOpts) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getGroupPK")
	return *ret0, err
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[2] groupPK)
func (_Dkg *DkgSession) GetGroupPK() ([2]*big.Int, error) {
	return _Dkg.Contract.GetGroupPK(&_Dkg.CallOpts)
}

// GetGroupPK is a free data retrieval call binding the contract method 0xf75fbced.
//
// Solidity: function getGroupPK() constant returns(uint256[2] groupPK)
func (_Dkg *DkgCallerSession) GetGroupPK() ([2]*big.Int, error) {
	return _Dkg.Contract.GetGroupPK(&_Dkg.CallOpts)
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_Dkg *DkgCaller) GetParticipantIsCommitted(opts *bind.CallOpts, participantIndex uint16) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getParticipantIsCommitted", participantIndex)
	return *ret0, err
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_Dkg *DkgSession) GetParticipantIsCommitted(participantIndex uint16) (bool, error) {
	return _Dkg.Contract.GetParticipantIsCommitted(&_Dkg.CallOpts, participantIndex)
}

// GetParticipantIsCommitted is a free data retrieval call binding the contract method 0x5072fd11.
//
// Solidity: function getParticipantIsCommitted(uint16 participantIndex) constant returns(bool isCommitted)
func (_Dkg *DkgCallerSession) GetParticipantIsCommitted(participantIndex uint16) (bool, error) {
	return _Dkg.Contract.GetParticipantIsCommitted(&_Dkg.CallOpts, participantIndex)
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_Dkg *DkgCaller) GetParticipantPkEnc(opts *bind.CallOpts, participantIndex uint16) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getParticipantPkEnc", participantIndex)
	return *ret0, err
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_Dkg *DkgSession) GetParticipantPkEnc(participantIndex uint16) ([2]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPkEnc(&_Dkg.CallOpts, participantIndex)
}

// GetParticipantPkEnc is a free data retrieval call binding the contract method 0xab5a3159.
//
// Solidity: function getParticipantPkEnc(uint16 participantIndex) constant returns(uint256[2] encPk)
func (_Dkg *DkgCallerSession) GetParticipantPkEnc(participantIndex uint16) ([2]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPkEnc(&_Dkg.CallOpts, participantIndex)
}

// GetParticipantPrvCommit is a free data retrieval call binding the contract method 0xd7101dd6.
//
// Solidity: function getParticipantPrvCommit(uint16 participantIndex, uint16 committedToIndex) constant returns(uint256 encPrivateCommitments)
func (_Dkg *DkgCaller) GetParticipantPrvCommit(opts *bind.CallOpts, participantIndex uint16, committedToIndex uint16) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getParticipantPrvCommit", participantIndex, committedToIndex)
	return *ret0, err
}

// GetParticipantPrvCommit is a free data retrieval call binding the contract method 0xd7101dd6.
//
// Solidity: function getParticipantPrvCommit(uint16 participantIndex, uint16 committedToIndex) constant returns(uint256 encPrivateCommitments)
func (_Dkg *DkgSession) GetParticipantPrvCommit(participantIndex uint16, committedToIndex uint16) (*big.Int, error) {
	return _Dkg.Contract.GetParticipantPrvCommit(&_Dkg.CallOpts, participantIndex, committedToIndex)
}

// GetParticipantPrvCommit is a free data retrieval call binding the contract method 0xd7101dd6.
//
// Solidity: function getParticipantPrvCommit(uint16 participantIndex, uint16 committedToIndex) constant returns(uint256 encPrivateCommitments)
func (_Dkg *DkgCallerSession) GetParticipantPrvCommit(participantIndex uint16, committedToIndex uint16) (*big.Int, error) {
	return _Dkg.Contract.GetParticipantPrvCommit(&_Dkg.CallOpts, participantIndex, committedToIndex)
}

// GetParticipantPubCommitG1 is a free data retrieval call binding the contract method 0x240df6de.
//
// Solidity: function getParticipantPubCommitG1(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[2] publicCommitmentsG1)
func (_Dkg *DkgCaller) GetParticipantPubCommitG1(opts *bind.CallOpts, participantIndex uint16, coefIndex uint16) ([2]*big.Int, error) {
	var (
		ret0 = new([2]*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getParticipantPubCommitG1", participantIndex, coefIndex)
	return *ret0, err
}

// GetParticipantPubCommitG1 is a free data retrieval call binding the contract method 0x240df6de.
//
// Solidity: function getParticipantPubCommitG1(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[2] publicCommitmentsG1)
func (_Dkg *DkgSession) GetParticipantPubCommitG1(participantIndex uint16, coefIndex uint16) ([2]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPubCommitG1(&_Dkg.CallOpts, participantIndex, coefIndex)
}

// GetParticipantPubCommitG1 is a free data retrieval call binding the contract method 0x240df6de.
//
// Solidity: function getParticipantPubCommitG1(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[2] publicCommitmentsG1)
func (_Dkg *DkgCallerSession) GetParticipantPubCommitG1(participantIndex uint16, coefIndex uint16) ([2]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPubCommitG1(&_Dkg.CallOpts, participantIndex, coefIndex)
}

// GetParticipantPubCommitG2 is a free data retrieval call binding the contract method 0x696ded60.
//
// Solidity: function getParticipantPubCommitG2(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[4] publicCommitmentsG2)
func (_Dkg *DkgCaller) GetParticipantPubCommitG2(opts *bind.CallOpts, participantIndex uint16, coefIndex uint16) ([4]*big.Int, error) {
	var (
		ret0 = new([4]*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "getParticipantPubCommitG2", participantIndex, coefIndex)
	return *ret0, err
}

// GetParticipantPubCommitG2 is a free data retrieval call binding the contract method 0x696ded60.
//
// Solidity: function getParticipantPubCommitG2(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[4] publicCommitmentsG2)
func (_Dkg *DkgSession) GetParticipantPubCommitG2(participantIndex uint16, coefIndex uint16) ([4]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPubCommitG2(&_Dkg.CallOpts, participantIndex, coefIndex)
}

// GetParticipantPubCommitG2 is a free data retrieval call binding the contract method 0x696ded60.
//
// Solidity: function getParticipantPubCommitG2(uint16 participantIndex, uint16 coefIndex) constant returns(uint256[4] publicCommitmentsG2)
func (_Dkg *DkgCallerSession) GetParticipantPubCommitG2(participantIndex uint16, coefIndex uint16) ([4]*big.Int, error) {
	return _Dkg.Contract.GetParticipantPubCommitG2(&_Dkg.CallOpts, participantIndex, coefIndex)
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_Dkg *DkgCaller) JoinTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "joinTimeout")
	return *ret0, err
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_Dkg *DkgSession) JoinTimeout() (*big.Int, error) {
	return _Dkg.Contract.JoinTimeout(&_Dkg.CallOpts)
}

// JoinTimeout is a free data retrieval call binding the contract method 0x247ddbdf.
//
// Solidity: function joinTimeout() constant returns(uint256)
func (_Dkg *DkgCallerSession) JoinTimeout() (*big.Int, error) {
	return _Dkg.Contract.JoinTimeout(&_Dkg.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_Dkg *DkgCaller) N(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "n")
	return *ret0, err
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_Dkg *DkgSession) N() (uint16, error) {
	return _Dkg.Contract.N(&_Dkg.CallOpts)
}

// N is a free data retrieval call binding the contract method 0x2e52d606.
//
// Solidity: function n() constant returns(uint16)
func (_Dkg *DkgCallerSession) N() (uint16, error) {
	return _Dkg.Contract.N(&_Dkg.CallOpts)
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bool isCommitted)
func (_Dkg *DkgCaller) Participants(opts *bind.CallOpts, arg0 uint16) (struct {
	EthPk       common.Address
	IsCommitted bool
}, error) {
	ret := new(struct {
		EthPk       common.Address
		IsCommitted bool
	})
	out := ret
	err := _Dkg.contract.Call(opts, out, "participants", arg0)
	return *ret, err
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bool isCommitted)
func (_Dkg *DkgSession) Participants(arg0 uint16) (struct {
	EthPk       common.Address
	IsCommitted bool
}, error) {
	return _Dkg.Contract.Participants(&_Dkg.CallOpts, arg0)
}

// Participants is a free data retrieval call binding the contract method 0x6baa03f0.
//
// Solidity: function participants(uint16 ) constant returns(address ethPk, bool isCommitted)
func (_Dkg *DkgCallerSession) Participants(arg0 uint16) (struct {
	EthPk       common.Address
	IsCommitted bool
}, error) {
	return _Dkg.Contract.Participants(&_Dkg.CallOpts, arg0)
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_Dkg *DkgCaller) PhaseStart(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "phaseStart")
	return *ret0, err
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_Dkg *DkgSession) PhaseStart() (*big.Int, error) {
	return _Dkg.Contract.PhaseStart(&_Dkg.CallOpts)
}

// PhaseStart is a free data retrieval call binding the contract method 0x49abee50.
//
// Solidity: function phaseStart() constant returns(uint256)
func (_Dkg *DkgCallerSession) PhaseStart() (*big.Int, error) {
	return _Dkg.Contract.PhaseStart(&_Dkg.CallOpts)
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_Dkg *DkgCaller) PostCommitTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "postCommitTimeout")
	return *ret0, err
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_Dkg *DkgSession) PostCommitTimeout() (*big.Int, error) {
	return _Dkg.Contract.PostCommitTimeout(&_Dkg.CallOpts)
}

// PostCommitTimeout is a free data retrieval call binding the contract method 0x04bab886.
//
// Solidity: function postCommitTimeout() constant returns(uint256)
func (_Dkg *DkgCallerSession) PostCommitTimeout() (*big.Int, error) {
	return _Dkg.Contract.PostCommitTimeout(&_Dkg.CallOpts)
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_Dkg *DkgCaller) T(opts *bind.CallOpts) (uint16, error) {
	var (
		ret0 = new(uint16)
	)
	out := ret0
	err := _Dkg.contract.Call(opts, out, "t")
	return *ret0, err
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_Dkg *DkgSession) T() (uint16, error) {
	return _Dkg.Contract.T(&_Dkg.CallOpts)
}

// T is a free data retrieval call binding the contract method 0x92d0d153.
//
// Solidity: function t() constant returns(uint16)
func (_Dkg *DkgCallerSession) T() (uint16, error) {
	return _Dkg.Contract.T(&_Dkg.CallOpts)
}

// Commit is a paid mutator transaction binding the contract method 0x0777ca18.
//
// Solidity: function commit(uint16 senderIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] encPrCommit) returns()
func (_Dkg *DkgTransactor) Commit(opts *bind.TransactOpts, senderIndex uint16, pubCommitG1 []*big.Int, pubCommitG2 []*big.Int, encPrCommit []*big.Int) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "commit", senderIndex, pubCommitG1, pubCommitG2, encPrCommit)
}

// Commit is a paid mutator transaction binding the contract method 0x0777ca18.
//
// Solidity: function commit(uint16 senderIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] encPrCommit) returns()
func (_Dkg *DkgSession) Commit(senderIndex uint16, pubCommitG1 []*big.Int, pubCommitG2 []*big.Int, encPrCommit []*big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.Commit(&_Dkg.TransactOpts, senderIndex, pubCommitG1, pubCommitG2, encPrCommit)
}

// Commit is a paid mutator transaction binding the contract method 0x0777ca18.
//
// Solidity: function commit(uint16 senderIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] encPrCommit) returns()
func (_Dkg *DkgTransactorSession) Commit(senderIndex uint16, pubCommitG1 []*big.Int, pubCommitG2 []*big.Int, encPrCommit []*big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.Commit(&_Dkg.TransactOpts, senderIndex, pubCommitG1, pubCommitG2, encPrCommit)
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_Dkg *DkgTransactor) CommitTimedOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "commitTimedOut")
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_Dkg *DkgSession) CommitTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.CommitTimedOut(&_Dkg.TransactOpts)
}

// CommitTimedOut is a paid mutator transaction binding the contract method 0xfb2990ad.
//
// Solidity: function commitTimedOut() returns()
func (_Dkg *DkgTransactorSession) CommitTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.CommitTimedOut(&_Dkg.TransactOpts)
}

// ComplaintNotInG1 is a paid mutator transaction binding the contract method 0xedd86484.
//
// Solidity: function complaintNotInG1(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgTransactor) ComplaintNotInG1(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "complaintNotInG1", complainerIndex, accusedIndex, coefIndex)
}

// ComplaintNotInG1 is a paid mutator transaction binding the contract method 0xedd86484.
//
// Solidity: function complaintNotInG1(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgSession) ComplaintNotInG1(complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintNotInG1(&_Dkg.TransactOpts, complainerIndex, accusedIndex, coefIndex)
}

// ComplaintNotInG1 is a paid mutator transaction binding the contract method 0xedd86484.
//
// Solidity: function complaintNotInG1(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgTransactorSession) ComplaintNotInG1(complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintNotInG1(&_Dkg.TransactOpts, complainerIndex, accusedIndex, coefIndex)
}

// ComplaintNotInG2 is a paid mutator transaction binding the contract method 0xed507e41.
//
// Solidity: function complaintNotInG2(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgTransactor) ComplaintNotInG2(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "complaintNotInG2", complainerIndex, accusedIndex, coefIndex)
}

// ComplaintNotInG2 is a paid mutator transaction binding the contract method 0xed507e41.
//
// Solidity: function complaintNotInG2(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgSession) ComplaintNotInG2(complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintNotInG2(&_Dkg.TransactOpts, complainerIndex, accusedIndex, coefIndex)
}

// ComplaintNotInG2 is a paid mutator transaction binding the contract method 0xed507e41.
//
// Solidity: function complaintNotInG2(uint16 complainerIndex, uint16 accusedIndex, uint16 coefIndex) returns()
func (_Dkg *DkgTransactorSession) ComplaintNotInG2(complainerIndex uint16, accusedIndex uint16, coefIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintNotInG2(&_Dkg.TransactOpts, complainerIndex, accusedIndex, coefIndex)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x7b74cc3c.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk) returns()
func (_Dkg *DkgTransactor) ComplaintPrivateCommit(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "complaintPrivateCommit", complainerIndex, accusedIndex, complainerSk)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x7b74cc3c.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk) returns()
func (_Dkg *DkgSession) ComplaintPrivateCommit(complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintPrivateCommit(&_Dkg.TransactOpts, complainerIndex, accusedIndex, complainerSk)
}

// ComplaintPrivateCommit is a paid mutator transaction binding the contract method 0x7b74cc3c.
//
// Solidity: function complaintPrivateCommit(uint16 complainerIndex, uint16 accusedIndex, uint256 complainerSk) returns()
func (_Dkg *DkgTransactorSession) ComplaintPrivateCommit(complainerIndex uint16, accusedIndex uint16, complainerSk *big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintPrivateCommit(&_Dkg.TransactOpts, complainerIndex, accusedIndex, complainerSk)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xdbb3d86e.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint16 pubCommitIndex) returns()
func (_Dkg *DkgTransactor) ComplaintPublicCommit(opts *bind.TransactOpts, complainerIndex uint16, accusedIndex uint16, pubCommitIndex uint16) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "complaintPublicCommit", complainerIndex, accusedIndex, pubCommitIndex)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xdbb3d86e.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint16 pubCommitIndex) returns()
func (_Dkg *DkgSession) ComplaintPublicCommit(complainerIndex uint16, accusedIndex uint16, pubCommitIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintPublicCommit(&_Dkg.TransactOpts, complainerIndex, accusedIndex, pubCommitIndex)
}

// ComplaintPublicCommit is a paid mutator transaction binding the contract method 0xdbb3d86e.
//
// Solidity: function complaintPublicCommit(uint16 complainerIndex, uint16 accusedIndex, uint16 pubCommitIndex) returns()
func (_Dkg *DkgTransactorSession) ComplaintPublicCommit(complainerIndex uint16, accusedIndex uint16, pubCommitIndex uint16) (*types.Transaction, error) {
	return _Dkg.Contract.ComplaintPublicCommit(&_Dkg.TransactOpts, complainerIndex, accusedIndex, pubCommitIndex)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_Dkg *DkgTransactor) Join(opts *bind.TransactOpts, encPk [2]*big.Int) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "join", encPk)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_Dkg *DkgSession) Join(encPk [2]*big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.Join(&_Dkg.TransactOpts, encPk)
}

// Join is a paid mutator transaction binding the contract method 0x46d6d51b.
//
// Solidity: function join(uint256[2] encPk) returns(uint16 index)
func (_Dkg *DkgTransactorSession) Join(encPk [2]*big.Int) (*types.Transaction, error) {
	return _Dkg.Contract.Join(&_Dkg.TransactOpts, encPk)
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_Dkg *DkgTransactor) JoinTimedOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "joinTimedOut")
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_Dkg *DkgSession) JoinTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.JoinTimedOut(&_Dkg.TransactOpts)
}

// JoinTimedOut is a paid mutator transaction binding the contract method 0xa78a9dad.
//
// Solidity: function joinTimedOut() returns()
func (_Dkg *DkgTransactorSession) JoinTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.JoinTimedOut(&_Dkg.TransactOpts)
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x60fed2f6.
//
// Solidity: function postCommitTimedOut() returns()
func (_Dkg *DkgTransactor) PostCommitTimedOut(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dkg.contract.Transact(opts, "postCommitTimedOut")
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x60fed2f6.
//
// Solidity: function postCommitTimedOut() returns()
func (_Dkg *DkgSession) PostCommitTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.PostCommitTimedOut(&_Dkg.TransactOpts)
}

// PostCommitTimedOut is a paid mutator transaction binding the contract method 0x60fed2f6.
//
// Solidity: function postCommitTimedOut() returns()
func (_Dkg *DkgTransactorSession) PostCommitTimedOut() (*types.Transaction, error) {
	return _Dkg.Contract.PostCommitTimedOut(&_Dkg.TransactOpts)
}

// DkgNewCommitIterator is returned from FilterNewCommit and is used to iterate over the raw logs and unpacked data for NewCommit events raised by the Dkg contract.
type DkgNewCommitIterator struct {
	Event *DkgNewCommit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DkgNewCommitIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DkgNewCommit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DkgNewCommit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DkgNewCommitIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DkgNewCommitIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DkgNewCommit represents a NewCommit event raised by the Dkg contract.
type DkgNewCommit struct {
	CommitterIndex uint16
	PubCommitG1    []*big.Int
	PubCommitG2    []*big.Int
	PrvCommit      []*big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNewCommit is a free log retrieval operation binding the contract event 0xa7932912e4a802d9e8f3a56a22297f2a341d526e66717cf78a208af10bcb2d59.
//
// Solidity: event NewCommit(uint16 committerIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] prvCommit)
func (_Dkg *DkgFilterer) FilterNewCommit(opts *bind.FilterOpts) (*DkgNewCommitIterator, error) {

	logs, sub, err := _Dkg.contract.FilterLogs(opts, "NewCommit")
	if err != nil {
		return nil, err
	}
	return &DkgNewCommitIterator{contract: _Dkg.contract, event: "NewCommit", logs: logs, sub: sub}, nil
}

// WatchNewCommit is a free log subscription operation binding the contract event 0xa7932912e4a802d9e8f3a56a22297f2a341d526e66717cf78a208af10bcb2d59.
//
// Solidity: event NewCommit(uint16 committerIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] prvCommit)
func (_Dkg *DkgFilterer) WatchNewCommit(opts *bind.WatchOpts, sink chan<- *DkgNewCommit) (event.Subscription, error) {

	logs, sub, err := _Dkg.contract.WatchLogs(opts, "NewCommit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DkgNewCommit)
				if err := _Dkg.contract.UnpackLog(event, "NewCommit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewCommit is a log parse operation binding the contract event 0xa7932912e4a802d9e8f3a56a22297f2a341d526e66717cf78a208af10bcb2d59.
//
// Solidity: event NewCommit(uint16 committerIndex, uint256[] pubCommitG1, uint256[] pubCommitG2, uint256[] prvCommit)
func (_Dkg *DkgFilterer) ParseNewCommit(log types.Log) (*DkgNewCommit, error) {
	event := new(DkgNewCommit)
	if err := _Dkg.contract.UnpackLog(event, "NewCommit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DkgParticipantJoinedIterator is returned from FilterParticipantJoined and is used to iterate over the raw logs and unpacked data for ParticipantJoined events raised by the Dkg contract.
type DkgParticipantJoinedIterator struct {
	Event *DkgParticipantJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DkgParticipantJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DkgParticipantJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DkgParticipantJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DkgParticipantJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DkgParticipantJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DkgParticipantJoined represents a ParticipantJoined event raised by the Dkg contract.
type DkgParticipantJoined struct {
	Index uint16
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterParticipantJoined is a free log retrieval operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_Dkg *DkgFilterer) FilterParticipantJoined(opts *bind.FilterOpts) (*DkgParticipantJoinedIterator, error) {

	logs, sub, err := _Dkg.contract.FilterLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return &DkgParticipantJoinedIterator{contract: _Dkg.contract, event: "ParticipantJoined", logs: logs, sub: sub}, nil
}

// WatchParticipantJoined is a free log subscription operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_Dkg *DkgFilterer) WatchParticipantJoined(opts *bind.WatchOpts, sink chan<- *DkgParticipantJoined) (event.Subscription, error) {

	logs, sub, err := _Dkg.contract.WatchLogs(opts, "ParticipantJoined")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DkgParticipantJoined)
				if err := _Dkg.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseParticipantJoined is a log parse operation binding the contract event 0xc75d64642856df264ef6b104bc61fd697842a75d760d475ce6417c2bad7a7093.
//
// Solidity: event ParticipantJoined(uint16 index)
func (_Dkg *DkgFilterer) ParseParticipantJoined(log types.Log) (*DkgParticipantJoined, error) {
	event := new(DkgParticipantJoined)
	if err := _Dkg.contract.UnpackLog(event, "ParticipantJoined", log); err != nil {
		return nil, err
	}
	return event, nil
}

// DkgPhaseChangeIterator is returned from FilterPhaseChange and is used to iterate over the raw logs and unpacked data for PhaseChange events raised by the Dkg contract.
type DkgPhaseChangeIterator struct {
	Event *DkgPhaseChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DkgPhaseChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DkgPhaseChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DkgPhaseChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DkgPhaseChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DkgPhaseChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DkgPhaseChange represents a PhaseChange event raised by the Dkg contract.
type DkgPhaseChange struct {
	Phase uint8
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterPhaseChange is a free log retrieval operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_Dkg *DkgFilterer) FilterPhaseChange(opts *bind.FilterOpts) (*DkgPhaseChangeIterator, error) {

	logs, sub, err := _Dkg.contract.FilterLogs(opts, "PhaseChange")
	if err != nil {
		return nil, err
	}
	return &DkgPhaseChangeIterator{contract: _Dkg.contract, event: "PhaseChange", logs: logs, sub: sub}, nil
}

// WatchPhaseChange is a free log subscription operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_Dkg *DkgFilterer) WatchPhaseChange(opts *bind.WatchOpts, sink chan<- *DkgPhaseChange) (event.Subscription, error) {

	logs, sub, err := _Dkg.contract.WatchLogs(opts, "PhaseChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DkgPhaseChange)
				if err := _Dkg.contract.UnpackLog(event, "PhaseChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePhaseChange is a log parse operation binding the contract event 0xed606d544c2202d032d2626c390923e6f260ca5d89625bba0cfe70d2bdda4e8f.
//
// Solidity: event PhaseChange(uint8 phase)
func (_Dkg *DkgFilterer) ParsePhaseChange(log types.Log) (*DkgPhaseChange, error) {
	event := new(DkgPhaseChange)
	if err := _Dkg.contract.UnpackLog(event, "PhaseChange", log); err != nil {
		return nil, err
	}
	return event, nil
}
